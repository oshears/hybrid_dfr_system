-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dfr_inference is
generic (
    C_M_AXI_INPUTS_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_INPUTS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUTS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUTS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUTS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUTS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUTS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUTS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_WEIGHTS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_WEIGHTS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUTS_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUTPUTS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUTS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUTS_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_OUTPUTS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUTS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUTS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUTS_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUTS_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_INPUTS_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUTS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUTS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_WEIGHTS_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_WEIGHTS_USER_VALUE : INTEGER := 0;
    C_M_AXI_WEIGHTS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_WEIGHTS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUTS_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUTPUTS_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUTS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUTS_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_inputs_AWVALID : OUT STD_LOGIC;
    m_axi_inputs_AWREADY : IN STD_LOGIC;
    m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ADDR_WIDTH-1 downto 0);
    m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ID_WIDTH-1 downto 0);
    m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_AWUSER_WIDTH-1 downto 0);
    m_axi_inputs_WVALID : OUT STD_LOGIC;
    m_axi_inputs_WREADY : IN STD_LOGIC;
    m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_DATA_WIDTH-1 downto 0);
    m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_DATA_WIDTH/8-1 downto 0);
    m_axi_inputs_WLAST : OUT STD_LOGIC;
    m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ID_WIDTH-1 downto 0);
    m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_WUSER_WIDTH-1 downto 0);
    m_axi_inputs_ARVALID : OUT STD_LOGIC;
    m_axi_inputs_ARREADY : IN STD_LOGIC;
    m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ADDR_WIDTH-1 downto 0);
    m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ID_WIDTH-1 downto 0);
    m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ARUSER_WIDTH-1 downto 0);
    m_axi_inputs_RVALID : IN STD_LOGIC;
    m_axi_inputs_RREADY : OUT STD_LOGIC;
    m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUTS_DATA_WIDTH-1 downto 0);
    m_axi_inputs_RLAST : IN STD_LOGIC;
    m_axi_inputs_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ID_WIDTH-1 downto 0);
    m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUTS_RUSER_WIDTH-1 downto 0);
    m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BVALID : IN STD_LOGIC;
    m_axi_inputs_BREADY : OUT STD_LOGIC;
    m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUTS_ID_WIDTH-1 downto 0);
    m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUTS_BUSER_WIDTH-1 downto 0);
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ADDR_WIDTH-1 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_AWUSER_WIDTH-1 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH-1 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH/8-1 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_WUSER_WIDTH-1 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ADDR_WIDTH-1 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ARUSER_WIDTH-1 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH-1 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_RUSER_WIDTH-1 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_BUSER_WIDTH-1 downto 0);
    m_axi_outputs_AWVALID : OUT STD_LOGIC;
    m_axi_outputs_AWREADY : IN STD_LOGIC;
    m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ADDR_WIDTH-1 downto 0);
    m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ID_WIDTH-1 downto 0);
    m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_AWUSER_WIDTH-1 downto 0);
    m_axi_outputs_WVALID : OUT STD_LOGIC;
    m_axi_outputs_WREADY : IN STD_LOGIC;
    m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_DATA_WIDTH-1 downto 0);
    m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_DATA_WIDTH/8-1 downto 0);
    m_axi_outputs_WLAST : OUT STD_LOGIC;
    m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ID_WIDTH-1 downto 0);
    m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_WUSER_WIDTH-1 downto 0);
    m_axi_outputs_ARVALID : OUT STD_LOGIC;
    m_axi_outputs_ARREADY : IN STD_LOGIC;
    m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ADDR_WIDTH-1 downto 0);
    m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ID_WIDTH-1 downto 0);
    m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ARUSER_WIDTH-1 downto 0);
    m_axi_outputs_RVALID : IN STD_LOGIC;
    m_axi_outputs_RREADY : OUT STD_LOGIC;
    m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_DATA_WIDTH-1 downto 0);
    m_axi_outputs_RLAST : IN STD_LOGIC;
    m_axi_outputs_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ID_WIDTH-1 downto 0);
    m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_RUSER_WIDTH-1 downto 0);
    m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BVALID : IN STD_LOGIC;
    m_axi_outputs_BREADY : OUT STD_LOGIC;
    m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_ID_WIDTH-1 downto 0);
    m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUTS_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dfr_inference is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dfr_inference_dfr_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=73.000000,HLS_SYN_LAT=93778828,HLS_SYN_TPT=none,HLS_SYN_MEM=569,HLS_SYN_DSP=0,HLS_SYN_FF=2974,HLS_SYN_LUT=7070,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_63 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_7D0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000011111010000";
    constant ap_const_lv32_7D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011111010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7C128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001111100000100101000";
    constant ap_const_lv32_13DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001111011010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3FB0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_7C128 : STD_LOGIC_VECTOR (18 downto 0) := "1111100000100101000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7D0 : STD_LOGIC_VECTOR (10 downto 0) := "11111010000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv19_64 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001100100";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_13DA : STD_LOGIC_VECTOR (12 downto 0) := "1001111011010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mg_data_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mg_data_ce0 : STD_LOGIC;
    signal mg_data_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal inputs_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal inputs_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal weights_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal icmp_ln111_reg_1247 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln113_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputs_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal outputs_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal outputs_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal inputs_AWREADY : STD_LOGIC;
    signal inputs_WREADY : STD_LOGIC;
    signal inputs_ARVALID : STD_LOGIC;
    signal inputs_ARREADY : STD_LOGIC;
    signal inputs_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs_RVALID : STD_LOGIC;
    signal inputs_RREADY : STD_LOGIC;
    signal inputs_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs_RLAST : STD_LOGIC;
    signal inputs_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal inputs_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inputs_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal inputs_BVALID : STD_LOGIC;
    signal inputs_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal inputs_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal inputs_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_AWREADY : STD_LOGIC;
    signal weights_WREADY : STD_LOGIC;
    signal weights_ARVALID : STD_LOGIC;
    signal weights_ARREADY : STD_LOGIC;
    signal weights_RVALID : STD_LOGIC;
    signal weights_RREADY : STD_LOGIC;
    signal weights_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_RLAST : STD_LOGIC;
    signal weights_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_BVALID : STD_LOGIC;
    signal weights_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal outputs_AWVALID : STD_LOGIC;
    signal outputs_AWREADY : STD_LOGIC;
    signal outputs_WVALID : STD_LOGIC;
    signal outputs_WREADY : STD_LOGIC;
    signal outputs_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal outputs_ARREADY : STD_LOGIC;
    signal outputs_RVALID : STD_LOGIC;
    signal outputs_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal outputs_RLAST : STD_LOGIC;
    signal outputs_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal outputs_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal outputs_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal outputs_BVALID : STD_LOGIC;
    signal outputs_BREADY : STD_LOGIC;
    signal outputs_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal outputs_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal outputs_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal node_idx_reg_389 : STD_LOGIC_VECTOR (6 downto 0);
    signal node_idx_1_reg_412 : STD_LOGIC_VECTOR (6 downto 0);
    signal reservoir_node_idx_reg_424 : STD_LOGIC_VECTOR (6 downto 0);
    signal weight_idx_reg_459 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_sum_reg_470 : STD_LOGIC_VECTOR (54 downto 0);
    signal grp_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_511 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal empty_22_fu_515_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_25_fu_532_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln51_fu_549_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln51_reg_1126 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal inputs_read_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln57_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln61_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state18_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln61_fu_717_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln61_reg_1153 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal add_ln92_fu_754_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln92_reg_1176 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal inputs_addr_read_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln80_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal icmp_ln84_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state34_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln84_fu_922_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln84_reg_1204 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln92_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_1092_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln100_reg_1223 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal add_ln97_fu_966_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln97_reg_1228 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state62_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state63_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln97_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln111_fu_1014_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln111_reg_1242 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal icmp_ln111_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln111_1_fu_1026_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln111_1_reg_1251 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state67_io : BOOLEAN;
    signal add_ln113_fu_1032_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state74_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state75_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state76_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln113_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_1261_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln114_fu_1044_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln114_reg_1265 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_read_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_sum_1_fu_1081_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state34 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state62 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_flush_enable : STD_LOGIC;
    signal ap_condition_pp5_exit_iter1_state75 : STD_LOGIC;
    signal reservoir_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal reservoir_ce0 : STD_LOGIC;
    signal reservoir_we0 : STD_LOGIC;
    signal reservoir_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reservoir_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reservoir_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal reservoir_ce1 : STD_LOGIC;
    signal reservoir_we1 : STD_LOGIC;
    signal reservoir_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal reservoir_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal reservoir_history_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal reservoir_history_ce0 : STD_LOGIC;
    signal reservoir_history_we0 : STD_LOGIC;
    signal reservoir_history_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reservoir_history_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_356 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond7431_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_reg_367 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond7330_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_reg_378 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_phi_mux_node_idx_phi_fu_393_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal k_1_reg_401 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_phi_mux_node_idx_1_phi_fu_416_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal output_idx_reg_436 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_mul_reg_447 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65543_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal node_idx_cast2_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65543_1_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_fu_928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal node_idx_1_cast3_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_984_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_2_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_2_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reservoir_history_idx_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal reservoir_history_idx_1_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal mg_output_1_fu_938_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_492_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_588_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_592_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_9_fu_578_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_606_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_610_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_616_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_630_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_634_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_602_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_650_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_fu_662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_656_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_670_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_674_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_fu_684_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_fu_698_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_1_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_793_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_1_fu_797_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_11_fu_783_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_1_fu_811_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_1_fu_815_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_1_fu_829_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_821_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_1_fu_835_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_839_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i37_cast_cast_cast_fu_847_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_807_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_855_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_8_fu_867_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_861_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_1_fu_875_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_879_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_1_fu_889_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_6_fu_897_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_7_fu_903_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_947_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_947_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln92_fu_952_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln100_fu_978_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln100_1_fu_989_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln100_fu_993_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln100_fu_993_p2 : signal is "no";
    signal zext_ln114_fu_1050_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln114_fu_1053_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln114_fu_1071_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln114_fu_1071_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln114_1_fu_1077_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal grp_fu_1092_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1092_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_492_ce : STD_LOGIC;
    signal icmp_ln51_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_947_ap_start : STD_LOGIC;
    signal grp_fu_947_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal mul_ln114_fu_1071_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dfr_inference_dadd_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dfr_inference_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dfr_inference_sitodp_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dfr_inference_urem_19ns_8ns_7_23_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component dfr_inference_mul_16ns_32s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component dfr_inference_mul_mul_19s_8ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component dfr_inference_mg_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component dfr_inference_reservoir IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dfr_inference_reservoir_history IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dfr_inference_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component dfr_inference_inputs_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dfr_inference_weights_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dfr_inference_outputs_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mg_data_U : component dfr_inference_mg_data
    generic map (
        DataWidth => 12,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mg_data_address0,
        ce0 => mg_data_ce0,
        q0 => mg_data_q0);

    control_s_axi_U : component dfr_inference_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    inputs_m_axi_U : component dfr_inference_inputs_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUTS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUTS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUTS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUTS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUTS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUTS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUTS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUTS_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_INPUTS_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_INPUTS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUTS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUTS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_inputs_AWVALID,
        AWREADY => m_axi_inputs_AWREADY,
        AWADDR => m_axi_inputs_AWADDR,
        AWID => m_axi_inputs_AWID,
        AWLEN => m_axi_inputs_AWLEN,
        AWSIZE => m_axi_inputs_AWSIZE,
        AWBURST => m_axi_inputs_AWBURST,
        AWLOCK => m_axi_inputs_AWLOCK,
        AWCACHE => m_axi_inputs_AWCACHE,
        AWPROT => m_axi_inputs_AWPROT,
        AWQOS => m_axi_inputs_AWQOS,
        AWREGION => m_axi_inputs_AWREGION,
        AWUSER => m_axi_inputs_AWUSER,
        WVALID => m_axi_inputs_WVALID,
        WREADY => m_axi_inputs_WREADY,
        WDATA => m_axi_inputs_WDATA,
        WSTRB => m_axi_inputs_WSTRB,
        WLAST => m_axi_inputs_WLAST,
        WID => m_axi_inputs_WID,
        WUSER => m_axi_inputs_WUSER,
        ARVALID => m_axi_inputs_ARVALID,
        ARREADY => m_axi_inputs_ARREADY,
        ARADDR => m_axi_inputs_ARADDR,
        ARID => m_axi_inputs_ARID,
        ARLEN => m_axi_inputs_ARLEN,
        ARSIZE => m_axi_inputs_ARSIZE,
        ARBURST => m_axi_inputs_ARBURST,
        ARLOCK => m_axi_inputs_ARLOCK,
        ARCACHE => m_axi_inputs_ARCACHE,
        ARPROT => m_axi_inputs_ARPROT,
        ARQOS => m_axi_inputs_ARQOS,
        ARREGION => m_axi_inputs_ARREGION,
        ARUSER => m_axi_inputs_ARUSER,
        RVALID => m_axi_inputs_RVALID,
        RREADY => m_axi_inputs_RREADY,
        RDATA => m_axi_inputs_RDATA,
        RLAST => m_axi_inputs_RLAST,
        RID => m_axi_inputs_RID,
        RUSER => m_axi_inputs_RUSER,
        RRESP => m_axi_inputs_RRESP,
        BVALID => m_axi_inputs_BVALID,
        BREADY => m_axi_inputs_BREADY,
        BRESP => m_axi_inputs_BRESP,
        BID => m_axi_inputs_BID,
        BUSER => m_axi_inputs_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inputs_ARVALID,
        I_ARREADY => inputs_ARREADY,
        I_ARADDR => inputs_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => inputs_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => inputs_RVALID,
        I_RREADY => inputs_RREADY,
        I_RDATA => inputs_RDATA,
        I_RID => inputs_RID,
        I_RUSER => inputs_RUSER,
        I_RRESP => inputs_RRESP,
        I_RLAST => inputs_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => inputs_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => inputs_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => inputs_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => inputs_BRESP,
        I_BID => inputs_BID,
        I_BUSER => inputs_BUSER);

    weights_m_axi_U : component dfr_inference_weights_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_WEIGHTS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_WEIGHTS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_WEIGHTS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_WEIGHTS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_WEIGHTS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_WEIGHTS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_WEIGHTS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_WEIGHTS_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_WEIGHTS_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_WEIGHTS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_WEIGHTS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_WEIGHTS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_weights_AWVALID,
        AWREADY => m_axi_weights_AWREADY,
        AWADDR => m_axi_weights_AWADDR,
        AWID => m_axi_weights_AWID,
        AWLEN => m_axi_weights_AWLEN,
        AWSIZE => m_axi_weights_AWSIZE,
        AWBURST => m_axi_weights_AWBURST,
        AWLOCK => m_axi_weights_AWLOCK,
        AWCACHE => m_axi_weights_AWCACHE,
        AWPROT => m_axi_weights_AWPROT,
        AWQOS => m_axi_weights_AWQOS,
        AWREGION => m_axi_weights_AWREGION,
        AWUSER => m_axi_weights_AWUSER,
        WVALID => m_axi_weights_WVALID,
        WREADY => m_axi_weights_WREADY,
        WDATA => m_axi_weights_WDATA,
        WSTRB => m_axi_weights_WSTRB,
        WLAST => m_axi_weights_WLAST,
        WID => m_axi_weights_WID,
        WUSER => m_axi_weights_WUSER,
        ARVALID => m_axi_weights_ARVALID,
        ARREADY => m_axi_weights_ARREADY,
        ARADDR => m_axi_weights_ARADDR,
        ARID => m_axi_weights_ARID,
        ARLEN => m_axi_weights_ARLEN,
        ARSIZE => m_axi_weights_ARSIZE,
        ARBURST => m_axi_weights_ARBURST,
        ARLOCK => m_axi_weights_ARLOCK,
        ARCACHE => m_axi_weights_ARCACHE,
        ARPROT => m_axi_weights_ARPROT,
        ARQOS => m_axi_weights_ARQOS,
        ARREGION => m_axi_weights_ARREGION,
        ARUSER => m_axi_weights_ARUSER,
        RVALID => m_axi_weights_RVALID,
        RREADY => m_axi_weights_RREADY,
        RDATA => m_axi_weights_RDATA,
        RLAST => m_axi_weights_RLAST,
        RID => m_axi_weights_RID,
        RUSER => m_axi_weights_RUSER,
        RRESP => m_axi_weights_RRESP,
        BVALID => m_axi_weights_BVALID,
        BREADY => m_axi_weights_BREADY,
        BRESP => m_axi_weights_BRESP,
        BID => m_axi_weights_BID,
        BUSER => m_axi_weights_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => weights_ARVALID,
        I_ARREADY => weights_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_64,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => weights_RVALID,
        I_RREADY => weights_RREADY,
        I_RDATA => weights_RDATA,
        I_RID => weights_RID,
        I_RUSER => weights_RUSER,
        I_RRESP => weights_RRESP,
        I_RLAST => weights_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => weights_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => weights_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => weights_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => weights_BRESP,
        I_BID => weights_BID,
        I_BUSER => weights_BUSER);

    outputs_m_axi_U : component dfr_inference_outputs_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUTS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUTS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUTS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUTS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUTS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUTS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUTS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUTS_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUTPUTS_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUTPUTS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUTS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUTS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_outputs_AWVALID,
        AWREADY => m_axi_outputs_AWREADY,
        AWADDR => m_axi_outputs_AWADDR,
        AWID => m_axi_outputs_AWID,
        AWLEN => m_axi_outputs_AWLEN,
        AWSIZE => m_axi_outputs_AWSIZE,
        AWBURST => m_axi_outputs_AWBURST,
        AWLOCK => m_axi_outputs_AWLOCK,
        AWCACHE => m_axi_outputs_AWCACHE,
        AWPROT => m_axi_outputs_AWPROT,
        AWQOS => m_axi_outputs_AWQOS,
        AWREGION => m_axi_outputs_AWREGION,
        AWUSER => m_axi_outputs_AWUSER,
        WVALID => m_axi_outputs_WVALID,
        WREADY => m_axi_outputs_WREADY,
        WDATA => m_axi_outputs_WDATA,
        WSTRB => m_axi_outputs_WSTRB,
        WLAST => m_axi_outputs_WLAST,
        WID => m_axi_outputs_WID,
        WUSER => m_axi_outputs_WUSER,
        ARVALID => m_axi_outputs_ARVALID,
        ARREADY => m_axi_outputs_ARREADY,
        ARADDR => m_axi_outputs_ARADDR,
        ARID => m_axi_outputs_ARID,
        ARLEN => m_axi_outputs_ARLEN,
        ARSIZE => m_axi_outputs_ARSIZE,
        ARBURST => m_axi_outputs_ARBURST,
        ARLOCK => m_axi_outputs_ARLOCK,
        ARCACHE => m_axi_outputs_ARCACHE,
        ARPROT => m_axi_outputs_ARPROT,
        ARQOS => m_axi_outputs_ARQOS,
        ARREGION => m_axi_outputs_ARREGION,
        ARUSER => m_axi_outputs_ARUSER,
        RVALID => m_axi_outputs_RVALID,
        RREADY => m_axi_outputs_RREADY,
        RDATA => m_axi_outputs_RDATA,
        RLAST => m_axi_outputs_RLAST,
        RID => m_axi_outputs_RID,
        RUSER => m_axi_outputs_RUSER,
        RRESP => m_axi_outputs_RRESP,
        BVALID => m_axi_outputs_BVALID,
        BREADY => m_axi_outputs_BREADY,
        BRESP => m_axi_outputs_BRESP,
        BID => m_axi_outputs_BID,
        BUSER => m_axi_outputs_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => outputs_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => outputs_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => outputs_RDATA,
        I_RID => outputs_RID,
        I_RUSER => outputs_RUSER,
        I_RRESP => outputs_RRESP,
        I_RLAST => outputs_RLAST,
        I_AWVALID => outputs_AWVALID,
        I_AWREADY => outputs_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_13DA,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => outputs_WVALID,
        I_WREADY => outputs_WREADY,
        I_WDATA => outputs_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => outputs_BVALID,
        I_BREADY => outputs_BREADY,
        I_BRESP => outputs_BRESP,
        I_BID => outputs_BID,
        I_BUSER => outputs_BUSER);

    reservoir_U : component dfr_inference_reservoir
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => reservoir_address0,
        ce0 => reservoir_ce0,
        we0 => reservoir_we0,
        d0 => reservoir_d0,
        q0 => reservoir_q0,
        address1 => reservoir_address1,
        ce1 => reservoir_ce1,
        we1 => reservoir_we1,
        d1 => reservoir_d1,
        q1 => reservoir_q1);

    reservoir_history_U : component dfr_inference_reservoir_history
    generic map (
        DataWidth => 16,
        AddressRange => 508200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => reservoir_history_address0,
        ce0 => reservoir_history_ce0,
        we0 => reservoir_history_we0,
        d0 => reservoir_history_d0,
        q0 => reservoir_history_q0);

    dadd_64ns_64ns_64_2_full_dsp_1_U1 : component dfr_inference_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_492_p1,
        din1 => grp_fu_486_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_482_p2);

    dmul_64ns_64ns_64_2_max_dsp_1_U2 : component dfr_inference_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_492_p1,
        din1 => ap_const_lv64_3FB0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_486_p2);

    sitodp_32ns_64_2_no_dsp_1_U3 : component dfr_inference_sitodp_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_492_p0,
        ce => grp_fu_492_ce,
        dout => grp_fu_492_p1);

    urem_19ns_8ns_7_23_seq_1_U4 : component dfr_inference_urem_19ns_8ns_7_23_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_947_ap_start,
        done => grp_fu_947_ap_done,
        din0 => add_ln92_reg_1176,
        din1 => grp_fu_947_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_947_p2);

    mul_16ns_32s_48_1_1_U5 : component dfr_inference_mul_16ns_32s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln114_fu_1071_p0,
        din1 => weights_read_reg_1270,
        dout => mul_ln114_fu_1071_p2);

    mul_mul_19s_8ns_19_4_1_U6 : component dfr_inference_mul_mul_19s_8ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 8,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1092_p0,
        din1 => grp_fu_1092_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1092_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state18);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state34) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state34))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state34);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state62) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state62))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state62);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp5_flush_enable)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter1_state75)))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter1_state75))) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_24_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                empty_24_reg_367 <= ap_const_lv19_0;
            elsif (((exitcond7330_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                empty_24_reg_367 <= empty_25_fu_532_p2;
            end if; 
        end if;
    end process;

    empty_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7431_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_356 <= empty_22_fu_515_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_356 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_1_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                k_1_reg_401 <= ap_const_lv19_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                k_1_reg_401 <= add_ln92_reg_1176;
            end if; 
        end if;
    end process;

    k_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_reg_378 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                k_reg_378 <= add_ln51_reg_1126;
            end if; 
        end if;
    end process;

    node_idx_1_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                node_idx_1_reg_412 <= ap_const_lv7_63;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln84_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                node_idx_1_reg_412 <= add_ln84_reg_1204;
            end if; 
        end if;
    end process;

    node_idx_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                node_idx_reg_389 <= ap_const_lv7_63;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln61_reg_1149 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                node_idx_reg_389 <= add_ln61_reg_1153;
            end if; 
        end if;
    end process;

    output_idx_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outputs_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                output_idx_reg_436 <= ap_const_lv13_0;
            elsif (((outputs_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                output_idx_reg_436 <= add_ln111_reg_1242;
            end if; 
        end if;
    end process;

    output_sum_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                output_sum_reg_470 <= ap_const_lv55_0;
            elsif (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln113_reg_1261_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                output_sum_reg_470 <= output_sum_1_fu_1081_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outputs_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                phi_mul_reg_447 <= ap_const_lv19_0;
            elsif (((outputs_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                phi_mul_reg_447 <= add_ln111_1_reg_1251;
            end if; 
        end if;
    end process;

    reservoir_history_idx_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inputs_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                reservoir_history_idx_fu_178 <= ap_const_lv32_0;
            elsif (((icmp_ln92_reg_1214 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                reservoir_history_idx_fu_178 <= reservoir_history_idx_1_fu_1003_p2;
            end if; 
        end if;
    end process;

    reservoir_node_idx_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                reservoir_node_idx_reg_424 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln97_reg_1233 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                reservoir_node_idx_reg_424 <= add_ln97_reg_1228;
            end if; 
        end if;
    end process;

    weight_idx_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                weight_idx_reg_459 <= ap_const_lv7_0;
            elsif (((icmp_ln113_fu_1038_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                weight_idx_reg_459 <= add_ln113_fu_1032_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state67_io) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                add_ln111_1_reg_1251 <= add_ln111_1_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                add_ln111_reg_1242 <= add_ln111_fu_1014_p2;
                icmp_ln111_reg_1247 <= icmp_ln111_fu_1020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln51_reg_1126 <= add_ln51_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln61_fu_711_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln61_reg_1153 <= add_ln61_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln84_fu_916_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln84_reg_1204 <= add_ln84_fu_922_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln92_reg_1176 <= add_ln92_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                add_ln97_reg_1228 <= add_ln97_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln113_reg_1261 <= icmp_ln113_fu_1038_p2;
                icmp_ln113_reg_1261_pp5_iter1_reg <= icmp_ln113_reg_1261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln61_reg_1149 <= icmp_ln61_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln84_reg_1200 <= icmp_ln84_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                icmp_ln92_reg_1214 <= icmp_ln92_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln97_reg_1233 <= icmp_ln97_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                inputs_addr_read_reg_1185 <= inputs_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                inputs_read_reg_1134 <= inputs_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                mul_ln100_reg_1223 <= grp_fu_1092_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_511 <= mg_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln113_fu_1038_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                sub_ln114_reg_1265 <= sub_ln114_fu_1044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln113_reg_1261 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                weights_read_reg_1270 <= weights_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state13, ap_CS_fsm_state67, icmp_ln111_reg_1247, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_CS_fsm_state65, ap_CS_fsm_state77, ap_CS_fsm_state81, inputs_ARREADY, inputs_RVALID, outputs_AWREADY, outputs_WREADY, outputs_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state12, icmp_ln61_fu_711_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state28, icmp_ln84_fu_916_p2, ap_enable_reg_pp3_iter0, icmp_ln92_fu_956_p2, ap_CS_fsm_state58, ap_enable_reg_pp4_iter0, icmp_ln97_fu_972_p2, ap_block_state67_io, ap_enable_reg_pp5_iter0, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, exitcond7431_fu_521_p2, exitcond7330_fu_538_p2, icmp_ln51_fu_555_p2, icmp_ln70_fu_760_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7431_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond7330_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((inputs_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln51_fu_555_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((inputs_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln61_fu_711_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln61_fu_711_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state21 => 
                if (((inputs_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln70_fu_760_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((inputs_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln84_fu_916_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln84_fu_916_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((icmp_ln92_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((icmp_ln97_fu_972_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln97_fu_972_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state65 => 
                if (((outputs_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((ap_const_boolean_0 = ap_block_state67_io) and (icmp_ln111_reg_1247 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                elsif (((ap_const_boolean_0 = ap_block_state67_io) and (icmp_ln111_reg_1247 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state77 => 
                if (((outputs_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((outputs_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_993_p2 <= std_logic_vector(signed(mul_ln100_reg_1223) + signed(zext_ln100_1_fu_989_p1));
    add_ln111_1_fu_1026_p2 <= std_logic_vector(unsigned(phi_mul_reg_447) + unsigned(ap_const_lv19_64));
    add_ln111_fu_1014_p2 <= std_logic_vector(unsigned(output_idx_reg_436) + unsigned(ap_const_lv13_1));
    add_ln113_fu_1032_p2 <= std_logic_vector(unsigned(weight_idx_reg_459) + unsigned(ap_const_lv7_1));
    add_ln114_fu_1053_p2 <= std_logic_vector(unsigned(phi_mul_reg_447) + unsigned(zext_ln114_fu_1050_p1));
    add_ln510_1_fu_815_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_811_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_610_p2 <= std_logic_vector(unsigned(zext_ln510_fu_606_p1) + unsigned(ap_const_lv12_C01));
    add_ln51_fu_549_p2 <= std_logic_vector(unsigned(k_reg_378) + unsigned(ap_const_lv11_1));
    add_ln61_fu_717_p2 <= std_logic_vector(unsigned(ap_phi_mux_node_idx_phi_fu_393_p4) + unsigned(ap_const_lv7_7F));
    add_ln84_fu_922_p2 <= std_logic_vector(unsigned(ap_phi_mux_node_idx_1_phi_fu_416_p4) + unsigned(ap_const_lv7_7F));
    add_ln92_fu_754_p2 <= std_logic_vector(unsigned(k_1_reg_401) + unsigned(ap_const_lv19_1));
    add_ln97_fu_966_p2 <= std_logic_vector(unsigned(ap_phi_mux_reservoir_node_idx_phi_fu_428_p4) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(59);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(70);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state31 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state58 <= ap_CS_fsm(55);
    ap_CS_fsm_state61 <= ap_CS_fsm(58);
    ap_CS_fsm_state64 <= ap_CS_fsm(60);
    ap_CS_fsm_state65 <= ap_CS_fsm(61);
    ap_CS_fsm_state66 <= ap_CS_fsm(62);
    ap_CS_fsm_state67 <= ap_CS_fsm(63);
    ap_CS_fsm_state73 <= ap_CS_fsm(69);
    ap_CS_fsm_state77 <= ap_CS_fsm(71);
    ap_CS_fsm_state81 <= ap_CS_fsm(75);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln113_reg_1261, weights_RVALID)
    begin
                ap_block_pp5_stage0_11001 <= ((weights_RVALID = ap_const_logic_0) and (icmp_ln113_reg_1261 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln113_reg_1261, weights_RVALID)
    begin
                ap_block_pp5_stage0_subdone <= ((weights_RVALID = ap_const_logic_0) and (icmp_ln113_reg_1261 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;

        ap_block_state18_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state67_io_assign_proc : process(icmp_ln111_reg_1247, weights_ARREADY)
    begin
                ap_block_state67_io <= ((weights_ARREADY = ap_const_logic_0) and (icmp_ln111_reg_1247 = ap_const_lv1_0));
    end process;

        ap_block_state74_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_pp5_stage0_iter1_assign_proc : process(icmp_ln113_reg_1261, weights_RVALID)
    begin
                ap_block_state75_pp5_stage0_iter1 <= ((weights_RVALID = ap_const_logic_0) and (icmp_ln113_reg_1261 = ap_const_lv1_0));
    end process;

        ap_block_state76_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state18_assign_proc : process(icmp_ln61_fu_711_p2)
    begin
        if ((icmp_ln61_fu_711_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state34_assign_proc : process(icmp_ln84_fu_916_p2)
    begin
        if ((icmp_ln84_fu_916_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state34 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state62_assign_proc : process(icmp_ln97_fu_972_p2)
    begin
        if ((icmp_ln97_fu_972_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state62 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state62 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter1_state75_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            ap_condition_pp5_exit_iter1_state75 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter1_state75 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_flush_enable_assign_proc : process(ap_CS_fsm_pp5_stage0, icmp_ln113_fu_1038_p2, ap_block_pp5_stage0_subdone)
    begin
        if (((icmp_ln113_fu_1038_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            ap_condition_pp5_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp5_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state81, outputs_BVALID)
    begin
        if (((outputs_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_node_idx_1_phi_fu_416_p4_assign_proc : process(node_idx_1_reg_412, icmp_ln84_reg_1200, ap_CS_fsm_pp3_stage0, add_ln84_reg_1204, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln84_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_node_idx_1_phi_fu_416_p4 <= add_ln84_reg_1204;
        else 
            ap_phi_mux_node_idx_1_phi_fu_416_p4 <= node_idx_1_reg_412;
        end if; 
    end process;


    ap_phi_mux_node_idx_phi_fu_393_p4_assign_proc : process(node_idx_reg_389, icmp_ln61_reg_1149, ap_CS_fsm_pp2_stage0, add_ln61_reg_1153, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln61_reg_1149 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_node_idx_phi_fu_393_p4 <= add_ln61_reg_1153;
        else 
            ap_phi_mux_node_idx_phi_fu_393_p4 <= node_idx_reg_389;
        end if; 
    end process;


    ap_phi_mux_reservoir_node_idx_phi_fu_428_p4_assign_proc : process(reservoir_node_idx_reg_424, add_ln97_reg_1228, ap_CS_fsm_pp4_stage0, icmp_ln97_reg_1233, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln97_reg_1233 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 <= add_ln97_reg_1228;
        else 
            ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 <= reservoir_node_idx_reg_424;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state81, outputs_BVALID)
    begin
        if (((outputs_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_V_1_fu_771_p1 <= grp_fu_482_p2;
    data_V_fu_566_p1 <= grp_fu_482_p2;
    empty_22_fu_515_p2 <= std_logic_vector(unsigned(empty_reg_356) + unsigned(ap_const_lv7_1));
    empty_25_fu_532_p2 <= std_logic_vector(unsigned(empty_24_reg_367) + unsigned(ap_const_lv19_1));
    exitcond7330_fu_538_p2 <= "1" when (empty_24_reg_367 = ap_const_lv19_7C128) else "0";
    exitcond7431_fu_521_p2 <= "1" when (empty_reg_356 = ap_const_lv7_64) else "0";
    grp_fu_1092_p0 <= reservoir_history_idx_fu_178(19 - 1 downto 0);
    grp_fu_1092_p1 <= ap_const_lv19_64(8 - 1 downto 0);

    grp_fu_492_ce_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state13, inputs_RVALID, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((inputs_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((inputs_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            grp_fu_492_ce <= ap_const_logic_1;
        else 
            grp_fu_492_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_492_p0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state30, inputs_read_reg_1134, zext_ln57_fu_561_p1, inputs_addr_read_reg_1185, zext_ln80_fu_766_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_492_p0 <= inputs_addr_read_reg_1185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_492_p0 <= zext_ln80_fu_766_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_492_p0 <= inputs_read_reg_1134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_492_p0 <= zext_ln57_fu_561_p1;
        else 
            grp_fu_492_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_947_ap_start_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_947_ap_start <= ap_const_logic_1;
        else 
            grp_fu_947_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_947_p1 <= ap_const_lv19_64(8 - 1 downto 0);
    icmp_ln111_fu_1020_p2 <= "1" when (output_idx_reg_436 = ap_const_lv13_13DA) else "0";
    icmp_ln113_fu_1038_p2 <= "1" when (weight_idx_reg_459 = ap_const_lv7_64) else "0";
    icmp_ln51_fu_555_p2 <= "1" when (k_reg_378 = ap_const_lv11_7D0) else "0";
    icmp_ln61_fu_711_p2 <= "1" when (ap_phi_mux_node_idx_phi_fu_393_p4 = ap_const_lv7_0) else "0";
    icmp_ln70_fu_760_p2 <= "1" when (k_1_reg_401 = ap_const_lv19_7C128) else "0";
    icmp_ln84_fu_916_p2 <= "1" when (ap_phi_mux_node_idx_1_phi_fu_416_p4 = ap_const_lv7_0) else "0";
    icmp_ln92_fu_956_p2 <= "1" when (trunc_ln92_fu_952_p1 = ap_const_lv7_0) else "0";
    icmp_ln97_fu_972_p2 <= "1" when (ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 = ap_const_lv7_64) else "0";

    inputs_ARADDR_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state21, inputs_ARREADY)
    begin
        if ((inputs_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                inputs_ARADDR <= ap_const_lv64_7D0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                inputs_ARADDR <= ap_const_lv64_0;
            else 
                inputs_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inputs_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inputs_ARLEN_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state21, inputs_ARREADY)
    begin
        if ((inputs_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                inputs_ARLEN <= ap_const_lv32_7C128;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                inputs_ARLEN <= ap_const_lv32_7D0;
            else 
                inputs_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inputs_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inputs_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state21, inputs_ARREADY)
    begin
        if ((((inputs_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((inputs_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            inputs_ARVALID <= ap_const_logic_1;
        else 
            inputs_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    inputs_RREADY_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state13, inputs_RVALID)
    begin
        if ((((inputs_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((inputs_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            inputs_RREADY <= ap_const_logic_1;
        else 
            inputs_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    inputs_blk_n_AR_assign_proc : process(m_axi_inputs_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inputs_blk_n_AR <= m_axi_inputs_ARREADY;
        else 
            inputs_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    inputs_blk_n_R_assign_proc : process(m_axi_inputs_RVALID, ap_CS_fsm_state29, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            inputs_blk_n_R <= m_axi_inputs_RVALID;
        else 
            inputs_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    isNeg_1_fu_821_p3 <= add_ln510_1_fu_815_p2(11 downto 11);
    isNeg_fu_616_p3 <= add_ln510_fu_610_p2(11 downto 11);
    mantissa_1_fu_797_p4 <= ((ap_const_lv1_1 & tmp_12_fu_793_p1) & ap_const_lv1_0);
    mantissa_fu_592_p4 <= ((ap_const_lv1_1 & tmp_10_fu_588_p1) & ap_const_lv1_0);

    mg_data_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state32, zext_ln65543_fu_706_p1, zext_ln65543_1_fu_911_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            mg_data_address0 <= zext_ln65543_1_fu_911_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mg_data_address0 <= zext_ln65543_fu_706_p1(16 - 1 downto 0);
        else 
            mg_data_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mg_data_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            mg_data_ce0 <= ap_const_logic_1;
        else 
            mg_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mg_output_1_fu_938_p3 <= (reg_511 & ap_const_lv4_0);
    mul_ln114_fu_1071_p0 <= mul_ln114_fu_1071_p00(16 - 1 downto 0);
    mul_ln114_fu_1071_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reservoir_history_q0),48));
    node_idx_1_cast3_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(node_idx_1_reg_412),64));
    node_idx_cast2_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(node_idx_reg_389),64));
    output_sum_1_fu_1081_p2 <= std_logic_vector(signed(sext_ln114_1_fu_1077_p1) + signed(output_sum_reg_470));

    outputs_AWVALID_assign_proc : process(ap_CS_fsm_state65, outputs_AWREADY)
    begin
        if (((outputs_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            outputs_AWVALID <= ap_const_logic_1;
        else 
            outputs_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    outputs_BREADY_assign_proc : process(ap_CS_fsm_state81, outputs_BVALID)
    begin
        if (((outputs_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            outputs_BREADY <= ap_const_logic_1;
        else 
            outputs_BREADY <= ap_const_logic_0;
        end if; 
    end process;

        outputs_WDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(output_sum_reg_470),64));


    outputs_WVALID_assign_proc : process(ap_CS_fsm_state77, outputs_WREADY)
    begin
        if (((outputs_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            outputs_WVALID <= ap_const_logic_1;
        else 
            outputs_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    outputs_blk_n_AW_assign_proc : process(m_axi_outputs_AWREADY, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            outputs_blk_n_AW <= m_axi_outputs_AWREADY;
        else 
            outputs_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    outputs_blk_n_B_assign_proc : process(m_axi_outputs_BVALID, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            outputs_blk_n_B <= m_axi_outputs_BVALID;
        else 
            outputs_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    outputs_blk_n_W_assign_proc : process(m_axi_outputs_WREADY, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            outputs_blk_n_W <= m_axi_outputs_WREADY;
        else 
            outputs_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    p_Result_1_fu_775_p3 <= data_V_1_fu_771_p1(63 downto 63);
    p_Result_s_fu_570_p3 <= data_V_fu_566_p1(63 downto 63);
    p_cast1_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_24_reg_367),64));
    p_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_356),64));
    r_V_1_fu_656_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_602_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1(31-1 downto 0)))));
    r_V_2_fu_855_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_807_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1(31-1 downto 0)))));
    r_V_3_fu_861_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_807_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1(31-1 downto 0)))));
    r_V_fu_650_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_602_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1(31-1 downto 0)))));

    reservoir_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp2_stage0, ap_block_pp3_stage0, p_cast_fu_527_p1, node_idx_cast2_fu_728_p1, node_idx_1_cast3_fu_933_p1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            reservoir_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            reservoir_address0 <= node_idx_1_cast3_fu_933_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            reservoir_address0 <= node_idx_cast2_fu_728_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            reservoir_address0 <= ap_const_lv64_63(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            reservoir_address0 <= p_cast_fu_527_p1(7 - 1 downto 0);
        else 
            reservoir_address0 <= "XXXXXXX";
        end if; 
    end process;


    reservoir_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state28, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_state20, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, zext_ln63_fu_723_p1, zext_ln86_fu_928_p1, zext_ln100_fu_984_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            reservoir_address1 <= zext_ln100_fu_984_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            reservoir_address1 <= zext_ln86_fu_928_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            reservoir_address1 <= ap_const_lv64_63(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            reservoir_address1 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            reservoir_address1 <= zext_ln63_fu_723_p1(7 - 1 downto 0);
        else 
            reservoir_address1 <= "XXXXXXX";
        end if; 
    end process;


    reservoir_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            reservoir_ce0 <= ap_const_logic_1;
        else 
            reservoir_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reservoir_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state28, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            reservoir_ce1 <= ap_const_logic_1;
        else 
            reservoir_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    reservoir_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, reservoir_q1, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_CS_fsm_state36, mg_output_1_fu_938_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            reservoir_d0 <= mg_output_1_fu_938_p3;
        elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            reservoir_d0 <= reservoir_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            reservoir_d0 <= ap_const_lv16_0;
        else 
            reservoir_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    reservoir_d1 <= (reg_511 & ap_const_lv4_0);

    reservoir_history_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, ap_CS_fsm_state4, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, p_cast1_fu_544_p1, zext_ln100_2_fu_998_p1, zext_ln114_2_fu_1059_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            reservoir_history_address0 <= zext_ln114_2_fu_1059_p1(19 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            reservoir_history_address0 <= zext_ln100_2_fu_998_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            reservoir_history_address0 <= p_cast1_fu_544_p1(19 - 1 downto 0);
        else 
            reservoir_history_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    reservoir_history_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_CS_fsm_state4, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            reservoir_history_ce0 <= ap_const_logic_1;
        else 
            reservoir_history_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reservoir_history_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, reservoir_q1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            reservoir_history_d0 <= reservoir_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            reservoir_history_d0 <= ap_const_lv16_0;
        else 
            reservoir_history_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    reservoir_history_idx_1_fu_1003_p2 <= std_logic_vector(unsigned(reservoir_history_idx_fu_178) + unsigned(ap_const_lv32_1));

    reservoir_history_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln97_reg_1233, ap_enable_reg_pp4_iter1, exitcond7330_fu_538_p2)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln97_reg_1233 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((exitcond7330_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            reservoir_history_we0 <= ap_const_logic_1;
        else 
            reservoir_history_we0 <= ap_const_logic_0;
        end if; 
    end process;


    reservoir_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln61_reg_1149, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln84_reg_1200, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, exitcond7431_fu_521_p2, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln84_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln61_reg_1149 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((exitcond7431_fu_521_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            reservoir_we0 <= ap_const_logic_1;
        else 
            reservoir_we0 <= ap_const_logic_0;
        end if; 
    end process;


    reservoir_we1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            reservoir_we1 <= ap_const_logic_1;
        else 
            reservoir_we1 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_2_fu_692_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_fu_684_p3));
    result_V_6_fu_897_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_1_fu_889_p3));
    result_V_7_fu_903_p3 <= 
        result_V_6_fu_897_p2 when (p_Result_1_fu_775_p3(0) = '1') else 
        val_1_fu_889_p3;
    result_V_fu_698_p3 <= 
        result_V_2_fu_692_p2 when (p_Result_s_fu_570_p3(0) = '1') else 
        val_fu_684_p3;
        sext_ln114_1_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln114_fu_1071_p2),55));

        sext_ln1311_1_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_829_p2),12));

        sext_ln1311_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_624_p2),12));

    sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i37_cast_cast_cast_fu_847_p1),137));
        sh_prom_i_i_i_i_i37_cast_cast_cast_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_839_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_642_p1),137));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_634_p3),32));

    sub_ln100_fu_978_p2 <= std_logic_vector(signed(ap_const_lv7_63) - signed(ap_phi_mux_reservoir_node_idx_phi_fu_428_p4));
    sub_ln114_fu_1044_p2 <= std_logic_vector(signed(ap_const_lv7_63) - signed(weight_idx_reg_459));
    sub_ln1311_1_fu_829_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_11_fu_783_p4));
    sub_ln1311_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_9_fu_578_p4));
    tmp_10_fu_588_p1 <= data_V_fu_566_p1(52 - 1 downto 0);
    tmp_11_fu_783_p4 <= data_V_1_fu_771_p1(62 downto 52);
    tmp_12_fu_793_p1 <= data_V_1_fu_771_p1(52 - 1 downto 0);
    tmp_1_fu_674_p4 <= r_V_1_fu_656_p2(68 downto 53);
    tmp_6_fu_879_p4 <= r_V_3_fu_861_p2(68 downto 53);
    tmp_8_fu_867_p3 <= r_V_2_fu_855_p2(53 downto 53);
    tmp_9_fu_578_p4 <= data_V_fu_566_p1(62 downto 52);
    tmp_fu_662_p3 <= r_V_fu_650_p2(53 downto 53);
    trunc_ln92_fu_952_p1 <= grp_fu_947_p2(7 - 1 downto 0);
    ush_1_fu_839_p3 <= 
        sext_ln1311_1_fu_835_p1 when (isNeg_1_fu_821_p3(0) = '1') else 
        add_ln510_1_fu_815_p2;
    ush_fu_634_p3 <= 
        sext_ln1311_fu_630_p1 when (isNeg_fu_616_p3(0) = '1') else 
        add_ln510_fu_610_p2;
    val_1_fu_889_p3 <= 
        zext_ln662_1_fu_875_p1 when (isNeg_1_fu_821_p3(0) = '1') else 
        tmp_6_fu_879_p4;
    val_fu_684_p3 <= 
        zext_ln662_fu_670_p1 when (isNeg_fu_616_p3(0) = '1') else 
        tmp_1_fu_674_p4;

    weights_ARVALID_assign_proc : process(ap_CS_fsm_state67, icmp_ln111_reg_1247, ap_block_state67_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state67_io) and (icmp_ln111_reg_1247 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            weights_ARVALID <= ap_const_logic_1;
        else 
            weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    weights_RREADY_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln113_reg_1261, ap_block_pp5_stage0_11001)
    begin
        if (((icmp_ln113_reg_1261 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            weights_RREADY <= ap_const_logic_1;
        else 
            weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    weights_blk_n_AR_assign_proc : process(m_axi_weights_ARREADY, ap_CS_fsm_state67, icmp_ln111_reg_1247)
    begin
        if (((icmp_ln111_reg_1247 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            weights_blk_n_AR <= m_axi_weights_ARREADY;
        else 
            weights_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weights_blk_n_R_assign_proc : process(m_axi_weights_RVALID, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln113_reg_1261)
    begin
        if (((icmp_ln113_reg_1261 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            weights_blk_n_R <= m_axi_weights_RVALID;
        else 
            weights_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln100_1_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reservoir_node_idx_reg_424),19));
    zext_ln100_2_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_fu_993_p2),64));
    zext_ln100_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln100_fu_978_p2),64));
    zext_ln114_2_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_1053_p2),64));
    zext_ln114_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln114_reg_1265),19));
    zext_ln15_1_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_797_p4),137));
    zext_ln15_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_592_p4),137));
    zext_ln510_1_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_783_p4),12));
    zext_ln510_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_578_p4),12));
    zext_ln57_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reservoir_q0),32));
    zext_ln63_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_717_p2),64));
    zext_ln65543_1_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_7_fu_903_p3),64));
    zext_ln65543_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_fu_698_p3),64));
    zext_ln662_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_867_p3),16));
    zext_ln662_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_662_p3),16));
    zext_ln80_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reservoir_q1),32));
    zext_ln86_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_922_p2),64));
end behav;
