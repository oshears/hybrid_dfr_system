// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dfr_inference_dfr_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=73.000000,HLS_SYN_LAT=93778828,HLS_SYN_TPT=none,HLS_SYN_MEM=569,HLS_SYN_DSP=0,HLS_SYN_FF=2974,HLS_SYN_LUT=7070,HLS_VERSION=2020_2}" *)

module dfr_inference (
        ap_clk,
        ap_rst_n,
        m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY,
        m_axi_inputs_AWADDR,
        m_axi_inputs_AWID,
        m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID,
        m_axi_inputs_WREADY,
        m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST,
        m_axi_inputs_WID,
        m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY,
        m_axi_inputs_ARADDR,
        m_axi_inputs_ARID,
        m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID,
        m_axi_inputs_RREADY,
        m_axi_inputs_RDATA,
        m_axi_inputs_RLAST,
        m_axi_inputs_RID,
        m_axi_inputs_RUSER,
        m_axi_inputs_RRESP,
        m_axi_inputs_BVALID,
        m_axi_inputs_BREADY,
        m_axi_inputs_BRESP,
        m_axi_inputs_BID,
        m_axi_inputs_BUSER,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY,
        m_axi_outputs_AWADDR,
        m_axi_outputs_AWID,
        m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID,
        m_axi_outputs_WREADY,
        m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST,
        m_axi_outputs_WID,
        m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY,
        m_axi_outputs_ARADDR,
        m_axi_outputs_ARID,
        m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID,
        m_axi_outputs_RREADY,
        m_axi_outputs_RDATA,
        m_axi_outputs_RLAST,
        m_axi_outputs_RID,
        m_axi_outputs_RUSER,
        m_axi_outputs_RRESP,
        m_axi_outputs_BVALID,
        m_axi_outputs_BREADY,
        m_axi_outputs_BRESP,
        m_axi_outputs_BID,
        m_axi_outputs_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_pp2_stage0 = 76'd131072;
parameter    ap_ST_fsm_state20 = 76'd262144;
parameter    ap_ST_fsm_state21 = 76'd524288;
parameter    ap_ST_fsm_state22 = 76'd1048576;
parameter    ap_ST_fsm_state23 = 76'd2097152;
parameter    ap_ST_fsm_state24 = 76'd4194304;
parameter    ap_ST_fsm_state25 = 76'd8388608;
parameter    ap_ST_fsm_state26 = 76'd16777216;
parameter    ap_ST_fsm_state27 = 76'd33554432;
parameter    ap_ST_fsm_state28 = 76'd67108864;
parameter    ap_ST_fsm_state29 = 76'd134217728;
parameter    ap_ST_fsm_state30 = 76'd268435456;
parameter    ap_ST_fsm_state31 = 76'd536870912;
parameter    ap_ST_fsm_state32 = 76'd1073741824;
parameter    ap_ST_fsm_state33 = 76'd2147483648;
parameter    ap_ST_fsm_pp3_stage0 = 76'd4294967296;
parameter    ap_ST_fsm_state36 = 76'd8589934592;
parameter    ap_ST_fsm_state37 = 76'd17179869184;
parameter    ap_ST_fsm_state38 = 76'd34359738368;
parameter    ap_ST_fsm_state39 = 76'd68719476736;
parameter    ap_ST_fsm_state40 = 76'd137438953472;
parameter    ap_ST_fsm_state41 = 76'd274877906944;
parameter    ap_ST_fsm_state42 = 76'd549755813888;
parameter    ap_ST_fsm_state43 = 76'd1099511627776;
parameter    ap_ST_fsm_state44 = 76'd2199023255552;
parameter    ap_ST_fsm_state45 = 76'd4398046511104;
parameter    ap_ST_fsm_state46 = 76'd8796093022208;
parameter    ap_ST_fsm_state47 = 76'd17592186044416;
parameter    ap_ST_fsm_state48 = 76'd35184372088832;
parameter    ap_ST_fsm_state49 = 76'd70368744177664;
parameter    ap_ST_fsm_state50 = 76'd140737488355328;
parameter    ap_ST_fsm_state51 = 76'd281474976710656;
parameter    ap_ST_fsm_state52 = 76'd562949953421312;
parameter    ap_ST_fsm_state53 = 76'd1125899906842624;
parameter    ap_ST_fsm_state54 = 76'd2251799813685248;
parameter    ap_ST_fsm_state55 = 76'd4503599627370496;
parameter    ap_ST_fsm_state56 = 76'd9007199254740992;
parameter    ap_ST_fsm_state57 = 76'd18014398509481984;
parameter    ap_ST_fsm_state58 = 76'd36028797018963968;
parameter    ap_ST_fsm_state59 = 76'd72057594037927936;
parameter    ap_ST_fsm_state60 = 76'd144115188075855872;
parameter    ap_ST_fsm_state61 = 76'd288230376151711744;
parameter    ap_ST_fsm_pp4_stage0 = 76'd576460752303423488;
parameter    ap_ST_fsm_state64 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state65 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state66 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state67 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state68 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state69 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state70 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state71 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state72 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state73 = 76'd590295810358705651712;
parameter    ap_ST_fsm_pp5_stage0 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state77 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state78 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state79 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state80 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state81 = 76'd37778931862957161709568;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUTS_ID_WIDTH = 1;
parameter    C_M_AXI_INPUTS_ADDR_WIDTH = 64;
parameter    C_M_AXI_INPUTS_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUTS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUTS_TARGET_ADDR = 0;
parameter    C_M_AXI_INPUTS_USER_VALUE = 0;
parameter    C_M_AXI_INPUTS_PROT_VALUE = 0;
parameter    C_M_AXI_INPUTS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_WEIGHTS_ID_WIDTH = 1;
parameter    C_M_AXI_WEIGHTS_ADDR_WIDTH = 64;
parameter    C_M_AXI_WEIGHTS_DATA_WIDTH = 32;
parameter    C_M_AXI_WEIGHTS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_WEIGHTS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WEIGHTS_WUSER_WIDTH = 1;
parameter    C_M_AXI_WEIGHTS_RUSER_WIDTH = 1;
parameter    C_M_AXI_WEIGHTS_BUSER_WIDTH = 1;
parameter    C_M_AXI_WEIGHTS_TARGET_ADDR = 0;
parameter    C_M_AXI_WEIGHTS_USER_VALUE = 0;
parameter    C_M_AXI_WEIGHTS_PROT_VALUE = 0;
parameter    C_M_AXI_WEIGHTS_CACHE_VALUE = 3;
parameter    C_M_AXI_OUTPUTS_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_ADDR_WIDTH = 64;
parameter    C_M_AXI_OUTPUTS_DATA_WIDTH = 64;
parameter    C_M_AXI_OUTPUTS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUTS_TARGET_ADDR = 0;
parameter    C_M_AXI_OUTPUTS_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUTS_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUTS_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUTS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WEIGHTS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUTS_WSTRB_WIDTH = (64 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_inputs_AWVALID;
input   m_axi_inputs_AWREADY;
output  [C_M_AXI_INPUTS_ADDR_WIDTH - 1:0] m_axi_inputs_AWADDR;
output  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_inputs_AWID;
output  [7:0] m_axi_inputs_AWLEN;
output  [2:0] m_axi_inputs_AWSIZE;
output  [1:0] m_axi_inputs_AWBURST;
output  [1:0] m_axi_inputs_AWLOCK;
output  [3:0] m_axi_inputs_AWCACHE;
output  [2:0] m_axi_inputs_AWPROT;
output  [3:0] m_axi_inputs_AWQOS;
output  [3:0] m_axi_inputs_AWREGION;
output  [C_M_AXI_INPUTS_AWUSER_WIDTH - 1:0] m_axi_inputs_AWUSER;
output   m_axi_inputs_WVALID;
input   m_axi_inputs_WREADY;
output  [C_M_AXI_INPUTS_DATA_WIDTH - 1:0] m_axi_inputs_WDATA;
output  [C_M_AXI_INPUTS_WSTRB_WIDTH - 1:0] m_axi_inputs_WSTRB;
output   m_axi_inputs_WLAST;
output  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_inputs_WID;
output  [C_M_AXI_INPUTS_WUSER_WIDTH - 1:0] m_axi_inputs_WUSER;
output   m_axi_inputs_ARVALID;
input   m_axi_inputs_ARREADY;
output  [C_M_AXI_INPUTS_ADDR_WIDTH - 1:0] m_axi_inputs_ARADDR;
output  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_inputs_ARID;
output  [7:0] m_axi_inputs_ARLEN;
output  [2:0] m_axi_inputs_ARSIZE;
output  [1:0] m_axi_inputs_ARBURST;
output  [1:0] m_axi_inputs_ARLOCK;
output  [3:0] m_axi_inputs_ARCACHE;
output  [2:0] m_axi_inputs_ARPROT;
output  [3:0] m_axi_inputs_ARQOS;
output  [3:0] m_axi_inputs_ARREGION;
output  [C_M_AXI_INPUTS_ARUSER_WIDTH - 1:0] m_axi_inputs_ARUSER;
input   m_axi_inputs_RVALID;
output   m_axi_inputs_RREADY;
input  [C_M_AXI_INPUTS_DATA_WIDTH - 1:0] m_axi_inputs_RDATA;
input   m_axi_inputs_RLAST;
input  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_inputs_RID;
input  [C_M_AXI_INPUTS_RUSER_WIDTH - 1:0] m_axi_inputs_RUSER;
input  [1:0] m_axi_inputs_RRESP;
input   m_axi_inputs_BVALID;
output   m_axi_inputs_BREADY;
input  [1:0] m_axi_inputs_BRESP;
input  [C_M_AXI_INPUTS_ID_WIDTH - 1:0] m_axi_inputs_BID;
input  [C_M_AXI_INPUTS_BUSER_WIDTH - 1:0] m_axi_inputs_BUSER;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [C_M_AXI_WEIGHTS_ADDR_WIDTH - 1:0] m_axi_weights_AWADDR;
output  [C_M_AXI_WEIGHTS_ID_WIDTH - 1:0] m_axi_weights_AWID;
output  [7:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [C_M_AXI_WEIGHTS_AWUSER_WIDTH - 1:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [C_M_AXI_WEIGHTS_DATA_WIDTH - 1:0] m_axi_weights_WDATA;
output  [C_M_AXI_WEIGHTS_WSTRB_WIDTH - 1:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [C_M_AXI_WEIGHTS_ID_WIDTH - 1:0] m_axi_weights_WID;
output  [C_M_AXI_WEIGHTS_WUSER_WIDTH - 1:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [C_M_AXI_WEIGHTS_ADDR_WIDTH - 1:0] m_axi_weights_ARADDR;
output  [C_M_AXI_WEIGHTS_ID_WIDTH - 1:0] m_axi_weights_ARID;
output  [7:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [C_M_AXI_WEIGHTS_ARUSER_WIDTH - 1:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [C_M_AXI_WEIGHTS_DATA_WIDTH - 1:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [C_M_AXI_WEIGHTS_ID_WIDTH - 1:0] m_axi_weights_RID;
input  [C_M_AXI_WEIGHTS_RUSER_WIDTH - 1:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [C_M_AXI_WEIGHTS_ID_WIDTH - 1:0] m_axi_weights_BID;
input  [C_M_AXI_WEIGHTS_BUSER_WIDTH - 1:0] m_axi_weights_BUSER;
output   m_axi_outputs_AWVALID;
input   m_axi_outputs_AWREADY;
output  [C_M_AXI_OUTPUTS_ADDR_WIDTH - 1:0] m_axi_outputs_AWADDR;
output  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_outputs_AWID;
output  [7:0] m_axi_outputs_AWLEN;
output  [2:0] m_axi_outputs_AWSIZE;
output  [1:0] m_axi_outputs_AWBURST;
output  [1:0] m_axi_outputs_AWLOCK;
output  [3:0] m_axi_outputs_AWCACHE;
output  [2:0] m_axi_outputs_AWPROT;
output  [3:0] m_axi_outputs_AWQOS;
output  [3:0] m_axi_outputs_AWREGION;
output  [C_M_AXI_OUTPUTS_AWUSER_WIDTH - 1:0] m_axi_outputs_AWUSER;
output   m_axi_outputs_WVALID;
input   m_axi_outputs_WREADY;
output  [C_M_AXI_OUTPUTS_DATA_WIDTH - 1:0] m_axi_outputs_WDATA;
output  [C_M_AXI_OUTPUTS_WSTRB_WIDTH - 1:0] m_axi_outputs_WSTRB;
output   m_axi_outputs_WLAST;
output  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_outputs_WID;
output  [C_M_AXI_OUTPUTS_WUSER_WIDTH - 1:0] m_axi_outputs_WUSER;
output   m_axi_outputs_ARVALID;
input   m_axi_outputs_ARREADY;
output  [C_M_AXI_OUTPUTS_ADDR_WIDTH - 1:0] m_axi_outputs_ARADDR;
output  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_outputs_ARID;
output  [7:0] m_axi_outputs_ARLEN;
output  [2:0] m_axi_outputs_ARSIZE;
output  [1:0] m_axi_outputs_ARBURST;
output  [1:0] m_axi_outputs_ARLOCK;
output  [3:0] m_axi_outputs_ARCACHE;
output  [2:0] m_axi_outputs_ARPROT;
output  [3:0] m_axi_outputs_ARQOS;
output  [3:0] m_axi_outputs_ARREGION;
output  [C_M_AXI_OUTPUTS_ARUSER_WIDTH - 1:0] m_axi_outputs_ARUSER;
input   m_axi_outputs_RVALID;
output   m_axi_outputs_RREADY;
input  [C_M_AXI_OUTPUTS_DATA_WIDTH - 1:0] m_axi_outputs_RDATA;
input   m_axi_outputs_RLAST;
input  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_outputs_RID;
input  [C_M_AXI_OUTPUTS_RUSER_WIDTH - 1:0] m_axi_outputs_RUSER;
input  [1:0] m_axi_outputs_RRESP;
input   m_axi_outputs_BVALID;
output   m_axi_outputs_BREADY;
input  [1:0] m_axi_outputs_BRESP;
input  [C_M_AXI_OUTPUTS_ID_WIDTH - 1:0] m_axi_outputs_BID;
input  [C_M_AXI_OUTPUTS_BUSER_WIDTH - 1:0] m_axi_outputs_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [15:0] mg_data_address0;
reg    mg_data_ce0;
wire   [11:0] mg_data_q0;
reg    inputs_blk_n_AR;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state21;
reg    inputs_blk_n_R;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state13;
reg    weights_blk_n_AR;
wire    ap_CS_fsm_state67;
reg   [0:0] icmp_ln111_reg_1247;
reg    weights_blk_n_R;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln113_reg_1261;
reg    outputs_blk_n_AW;
wire    ap_CS_fsm_state65;
reg    outputs_blk_n_W;
wire    ap_CS_fsm_state77;
reg    outputs_blk_n_B;
wire    ap_CS_fsm_state81;
wire    inputs_AWREADY;
wire    inputs_WREADY;
reg    inputs_ARVALID;
wire    inputs_ARREADY;
reg   [63:0] inputs_ARADDR;
reg   [31:0] inputs_ARLEN;
wire    inputs_RVALID;
reg    inputs_RREADY;
wire   [31:0] inputs_RDATA;
wire    inputs_RLAST;
wire   [0:0] inputs_RID;
wire   [0:0] inputs_RUSER;
wire   [1:0] inputs_RRESP;
wire    inputs_BVALID;
wire   [1:0] inputs_BRESP;
wire   [0:0] inputs_BID;
wire   [0:0] inputs_BUSER;
wire    weights_AWREADY;
wire    weights_WREADY;
reg    weights_ARVALID;
wire    weights_ARREADY;
wire    weights_RVALID;
reg    weights_RREADY;
wire   [31:0] weights_RDATA;
wire    weights_RLAST;
wire   [0:0] weights_RID;
wire   [0:0] weights_RUSER;
wire   [1:0] weights_RRESP;
wire    weights_BVALID;
wire   [1:0] weights_BRESP;
wire   [0:0] weights_BID;
wire   [0:0] weights_BUSER;
reg    outputs_AWVALID;
wire    outputs_AWREADY;
reg    outputs_WVALID;
wire    outputs_WREADY;
wire   [63:0] outputs_WDATA;
wire    outputs_ARREADY;
wire    outputs_RVALID;
wire   [63:0] outputs_RDATA;
wire    outputs_RLAST;
wire   [0:0] outputs_RID;
wire   [0:0] outputs_RUSER;
wire   [1:0] outputs_RRESP;
wire    outputs_BVALID;
reg    outputs_BREADY;
wire   [1:0] outputs_BRESP;
wire   [0:0] outputs_BID;
wire   [0:0] outputs_BUSER;
reg   [6:0] node_idx_reg_389;
reg   [6:0] node_idx_1_reg_412;
reg   [6:0] reservoir_node_idx_reg_424;
reg   [6:0] weight_idx_reg_459;
reg  signed [54:0] output_sum_reg_470;
wire   [63:0] grp_fu_492_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire   [63:0] grp_fu_486_p2;
reg   [11:0] reg_511;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state33;
wire   [6:0] empty_22_fu_515_p2;
wire    ap_CS_fsm_state2;
wire   [18:0] empty_25_fu_532_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire   [10:0] add_ln51_fu_549_p2;
reg   [10:0] add_ln51_reg_1126;
wire    ap_CS_fsm_state12;
reg   [31:0] inputs_read_reg_1134;
wire   [31:0] zext_ln57_fu_561_p1;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln61_fu_711_p2;
reg   [0:0] icmp_ln61_reg_1149;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state18_pp2_stage0_iter0;
wire    ap_block_state19_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [6:0] add_ln61_fu_717_p2;
reg   [6:0] add_ln61_reg_1153;
reg    ap_enable_reg_pp2_iter0;
wire   [18:0] add_ln92_fu_754_p2;
reg   [18:0] add_ln92_reg_1176;
wire    ap_CS_fsm_state28;
reg   [31:0] inputs_addr_read_reg_1185;
wire   [31:0] zext_ln80_fu_766_p1;
wire    ap_CS_fsm_state32;
wire   [0:0] icmp_ln84_fu_916_p2;
reg   [0:0] icmp_ln84_reg_1200;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state34_pp3_stage0_iter0;
wire    ap_block_state35_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [6:0] add_ln84_fu_922_p2;
reg   [6:0] add_ln84_reg_1204;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln92_fu_956_p2;
reg   [0:0] icmp_ln92_reg_1214;
wire    ap_CS_fsm_state58;
wire  signed [18:0] grp_fu_1092_p2;
reg  signed [18:0] mul_ln100_reg_1223;
wire    ap_CS_fsm_state61;
wire   [6:0] add_ln97_fu_966_p2;
reg   [6:0] add_ln97_reg_1228;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state62_pp4_stage0_iter0;
wire    ap_block_state63_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln97_fu_972_p2;
reg   [0:0] icmp_ln97_reg_1233;
wire   [12:0] add_ln111_fu_1014_p2;
reg   [12:0] add_ln111_reg_1242;
wire    ap_CS_fsm_state66;
wire   [0:0] icmp_ln111_fu_1020_p2;
wire   [18:0] add_ln111_1_fu_1026_p2;
reg   [18:0] add_ln111_1_reg_1251;
reg    ap_block_state67_io;
wire   [6:0] add_ln113_fu_1032_p2;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state74_pp5_stage0_iter0;
reg    ap_block_state75_pp5_stage0_iter1;
wire    ap_block_state76_pp5_stage0_iter2;
reg    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln113_fu_1038_p2;
reg   [0:0] icmp_ln113_reg_1261_pp5_iter1_reg;
wire   [6:0] sub_ln114_fu_1044_p2;
reg   [6:0] sub_ln114_reg_1265;
reg  signed [31:0] weights_read_reg_1270;
wire   [54:0] output_sum_1_fu_1081_p2;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state18;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state34;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state62;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state73;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_flush_enable;
reg    ap_condition_pp5_exit_iter1_state75;
reg   [6:0] reservoir_address0;
reg    reservoir_ce0;
reg    reservoir_we0;
reg   [15:0] reservoir_d0;
wire   [15:0] reservoir_q0;
reg   [6:0] reservoir_address1;
reg    reservoir_ce1;
reg    reservoir_we1;
wire   [15:0] reservoir_d1;
wire   [15:0] reservoir_q1;
reg   [18:0] reservoir_history_address0;
reg    reservoir_history_ce0;
reg    reservoir_history_we0;
reg   [15:0] reservoir_history_d0;
wire   [15:0] reservoir_history_q0;
reg   [6:0] empty_reg_356;
wire   [0:0] exitcond7431_fu_521_p2;
reg   [18:0] empty_24_reg_367;
wire   [0:0] exitcond7330_fu_538_p2;
wire    ap_CS_fsm_state3;
reg   [10:0] k_reg_378;
wire    ap_CS_fsm_state20;
reg   [6:0] ap_phi_mux_node_idx_phi_fu_393_p4;
wire    ap_block_pp2_stage0;
reg   [18:0] k_1_reg_401;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state27;
reg   [6:0] ap_phi_mux_node_idx_1_phi_fu_416_p4;
wire    ap_block_pp3_stage0;
reg   [6:0] ap_phi_mux_reservoir_node_idx_phi_fu_428_p4;
wire    ap_block_pp4_stage0;
reg   [12:0] output_idx_reg_436;
reg   [18:0] phi_mul_reg_447;
wire   [63:0] p_cast_fu_527_p1;
wire   [63:0] p_cast1_fu_544_p1;
wire   [63:0] zext_ln65543_fu_706_p1;
wire   [63:0] zext_ln63_fu_723_p1;
wire   [63:0] node_idx_cast2_fu_728_p1;
wire   [63:0] zext_ln65543_1_fu_911_p1;
wire   [63:0] zext_ln86_fu_928_p1;
wire   [63:0] node_idx_1_cast3_fu_933_p1;
wire   [63:0] zext_ln100_fu_984_p1;
wire   [63:0] zext_ln100_2_fu_998_p1;
wire   [63:0] zext_ln114_2_fu_1059_p1;
reg   [31:0] reservoir_history_idx_fu_178;
wire   [31:0] reservoir_history_idx_1_fu_1003_p2;
wire    ap_CS_fsm_state36;
wire   [15:0] mg_output_1_fu_938_p3;
reg   [31:0] grp_fu_492_p0;
wire   [63:0] grp_fu_482_p2;
wire   [63:0] data_V_fu_566_p1;
wire   [51:0] tmp_10_fu_588_p1;
wire   [53:0] mantissa_fu_592_p4;
wire   [10:0] tmp_9_fu_578_p4;
wire   [11:0] zext_ln510_fu_606_p1;
wire   [11:0] add_ln510_fu_610_p2;
wire   [10:0] sub_ln1311_fu_624_p2;
wire   [0:0] isNeg_fu_616_p3;
wire  signed [11:0] sext_ln1311_fu_630_p1;
wire   [11:0] ush_fu_634_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_642_p1;
wire   [136:0] zext_ln15_fu_602_p1;
wire   [136:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1;
wire   [136:0] r_V_fu_650_p2;
wire   [0:0] tmp_fu_662_p3;
wire   [136:0] r_V_1_fu_656_p2;
wire   [15:0] zext_ln662_fu_670_p1;
wire   [15:0] tmp_1_fu_674_p4;
wire   [15:0] val_fu_684_p3;
wire   [0:0] p_Result_s_fu_570_p3;
wire   [15:0] result_V_2_fu_692_p2;
wire   [15:0] result_V_fu_698_p3;
wire   [63:0] data_V_1_fu_771_p1;
wire   [51:0] tmp_12_fu_793_p1;
wire   [53:0] mantissa_1_fu_797_p4;
wire   [10:0] tmp_11_fu_783_p4;
wire   [11:0] zext_ln510_1_fu_811_p1;
wire   [11:0] add_ln510_1_fu_815_p2;
wire   [10:0] sub_ln1311_1_fu_829_p2;
wire   [0:0] isNeg_1_fu_821_p3;
wire  signed [11:0] sext_ln1311_1_fu_835_p1;
wire   [11:0] ush_1_fu_839_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i37_cast_cast_cast_fu_847_p1;
wire   [136:0] zext_ln15_1_fu_807_p1;
wire   [136:0] sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1;
wire   [136:0] r_V_2_fu_855_p2;
wire   [0:0] tmp_8_fu_867_p3;
wire   [136:0] r_V_3_fu_861_p2;
wire   [15:0] zext_ln662_1_fu_875_p1;
wire   [15:0] tmp_6_fu_879_p4;
wire   [15:0] val_1_fu_889_p3;
wire   [0:0] p_Result_1_fu_775_p3;
wire   [15:0] result_V_6_fu_897_p2;
wire   [15:0] result_V_7_fu_903_p3;
wire   [7:0] grp_fu_947_p1;
wire   [6:0] grp_fu_947_p2;
wire   [6:0] trunc_ln92_fu_952_p1;
wire   [6:0] sub_ln100_fu_978_p2;
wire   [18:0] zext_ln100_1_fu_989_p1;
(* use_dsp48 = "no" *) wire   [18:0] add_ln100_fu_993_p2;
wire   [18:0] zext_ln114_fu_1050_p1;
wire   [18:0] add_ln114_fu_1053_p2;
wire   [15:0] mul_ln114_fu_1071_p0;
wire   [47:0] mul_ln114_fu_1071_p2;
wire  signed [54:0] sext_ln114_1_fu_1077_p1;
wire  signed [18:0] grp_fu_1092_p0;
wire   [7:0] grp_fu_1092_p1;
reg    grp_fu_492_ce;
wire   [0:0] icmp_ln51_fu_555_p2;
wire   [0:0] icmp_ln70_fu_760_p2;
reg    grp_fu_947_ap_start;
wire    grp_fu_947_ap_done;
reg   [75:0] ap_NS_fsm;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire   [47:0] mul_ln114_fu_1071_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 76'd1;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
end

dfr_inference_mg_data #(
    .DataWidth( 12 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
mg_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mg_data_address0),
    .ce0(mg_data_ce0),
    .q0(mg_data_q0)
);

dfr_inference_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

dfr_inference_inputs_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUTS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUTS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUTS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUTS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUTS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUTS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUTS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUTS_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_INPUTS_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_INPUTS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUTS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUTS_CACHE_VALUE ))
inputs_m_axi_U(
    .AWVALID(m_axi_inputs_AWVALID),
    .AWREADY(m_axi_inputs_AWREADY),
    .AWADDR(m_axi_inputs_AWADDR),
    .AWID(m_axi_inputs_AWID),
    .AWLEN(m_axi_inputs_AWLEN),
    .AWSIZE(m_axi_inputs_AWSIZE),
    .AWBURST(m_axi_inputs_AWBURST),
    .AWLOCK(m_axi_inputs_AWLOCK),
    .AWCACHE(m_axi_inputs_AWCACHE),
    .AWPROT(m_axi_inputs_AWPROT),
    .AWQOS(m_axi_inputs_AWQOS),
    .AWREGION(m_axi_inputs_AWREGION),
    .AWUSER(m_axi_inputs_AWUSER),
    .WVALID(m_axi_inputs_WVALID),
    .WREADY(m_axi_inputs_WREADY),
    .WDATA(m_axi_inputs_WDATA),
    .WSTRB(m_axi_inputs_WSTRB),
    .WLAST(m_axi_inputs_WLAST),
    .WID(m_axi_inputs_WID),
    .WUSER(m_axi_inputs_WUSER),
    .ARVALID(m_axi_inputs_ARVALID),
    .ARREADY(m_axi_inputs_ARREADY),
    .ARADDR(m_axi_inputs_ARADDR),
    .ARID(m_axi_inputs_ARID),
    .ARLEN(m_axi_inputs_ARLEN),
    .ARSIZE(m_axi_inputs_ARSIZE),
    .ARBURST(m_axi_inputs_ARBURST),
    .ARLOCK(m_axi_inputs_ARLOCK),
    .ARCACHE(m_axi_inputs_ARCACHE),
    .ARPROT(m_axi_inputs_ARPROT),
    .ARQOS(m_axi_inputs_ARQOS),
    .ARREGION(m_axi_inputs_ARREGION),
    .ARUSER(m_axi_inputs_ARUSER),
    .RVALID(m_axi_inputs_RVALID),
    .RREADY(m_axi_inputs_RREADY),
    .RDATA(m_axi_inputs_RDATA),
    .RLAST(m_axi_inputs_RLAST),
    .RID(m_axi_inputs_RID),
    .RUSER(m_axi_inputs_RUSER),
    .RRESP(m_axi_inputs_RRESP),
    .BVALID(m_axi_inputs_BVALID),
    .BREADY(m_axi_inputs_BREADY),
    .BRESP(m_axi_inputs_BRESP),
    .BID(m_axi_inputs_BID),
    .BUSER(m_axi_inputs_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(inputs_ARVALID),
    .I_ARREADY(inputs_ARREADY),
    .I_ARADDR(inputs_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(inputs_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(inputs_RVALID),
    .I_RREADY(inputs_RREADY),
    .I_RDATA(inputs_RDATA),
    .I_RID(inputs_RID),
    .I_RUSER(inputs_RUSER),
    .I_RRESP(inputs_RRESP),
    .I_RLAST(inputs_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(inputs_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(inputs_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(inputs_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(inputs_BRESP),
    .I_BID(inputs_BID),
    .I_BUSER(inputs_BUSER)
);

dfr_inference_weights_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_WEIGHTS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_WEIGHTS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_WEIGHTS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_WEIGHTS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_WEIGHTS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_WEIGHTS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_WEIGHTS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_WEIGHTS_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_WEIGHTS_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_WEIGHTS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_WEIGHTS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_WEIGHTS_CACHE_VALUE ))
weights_m_axi_U(
    .AWVALID(m_axi_weights_AWVALID),
    .AWREADY(m_axi_weights_AWREADY),
    .AWADDR(m_axi_weights_AWADDR),
    .AWID(m_axi_weights_AWID),
    .AWLEN(m_axi_weights_AWLEN),
    .AWSIZE(m_axi_weights_AWSIZE),
    .AWBURST(m_axi_weights_AWBURST),
    .AWLOCK(m_axi_weights_AWLOCK),
    .AWCACHE(m_axi_weights_AWCACHE),
    .AWPROT(m_axi_weights_AWPROT),
    .AWQOS(m_axi_weights_AWQOS),
    .AWREGION(m_axi_weights_AWREGION),
    .AWUSER(m_axi_weights_AWUSER),
    .WVALID(m_axi_weights_WVALID),
    .WREADY(m_axi_weights_WREADY),
    .WDATA(m_axi_weights_WDATA),
    .WSTRB(m_axi_weights_WSTRB),
    .WLAST(m_axi_weights_WLAST),
    .WID(m_axi_weights_WID),
    .WUSER(m_axi_weights_WUSER),
    .ARVALID(m_axi_weights_ARVALID),
    .ARREADY(m_axi_weights_ARREADY),
    .ARADDR(m_axi_weights_ARADDR),
    .ARID(m_axi_weights_ARID),
    .ARLEN(m_axi_weights_ARLEN),
    .ARSIZE(m_axi_weights_ARSIZE),
    .ARBURST(m_axi_weights_ARBURST),
    .ARLOCK(m_axi_weights_ARLOCK),
    .ARCACHE(m_axi_weights_ARCACHE),
    .ARPROT(m_axi_weights_ARPROT),
    .ARQOS(m_axi_weights_ARQOS),
    .ARREGION(m_axi_weights_ARREGION),
    .ARUSER(m_axi_weights_ARUSER),
    .RVALID(m_axi_weights_RVALID),
    .RREADY(m_axi_weights_RREADY),
    .RDATA(m_axi_weights_RDATA),
    .RLAST(m_axi_weights_RLAST),
    .RID(m_axi_weights_RID),
    .RUSER(m_axi_weights_RUSER),
    .RRESP(m_axi_weights_RRESP),
    .BVALID(m_axi_weights_BVALID),
    .BREADY(m_axi_weights_BREADY),
    .BRESP(m_axi_weights_BRESP),
    .BID(m_axi_weights_BID),
    .BUSER(m_axi_weights_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(weights_ARVALID),
    .I_ARREADY(weights_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd100),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(weights_RVALID),
    .I_RREADY(weights_RREADY),
    .I_RDATA(weights_RDATA),
    .I_RID(weights_RID),
    .I_RUSER(weights_RUSER),
    .I_RRESP(weights_RRESP),
    .I_RLAST(weights_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(weights_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(weights_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(weights_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(weights_BRESP),
    .I_BID(weights_BID),
    .I_BUSER(weights_BUSER)
);

dfr_inference_outputs_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUTS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUTS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUTS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUTS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUTS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUTS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUTS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUTS_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_OUTPUTS_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_OUTPUTS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUTS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUTS_CACHE_VALUE ))
outputs_m_axi_U(
    .AWVALID(m_axi_outputs_AWVALID),
    .AWREADY(m_axi_outputs_AWREADY),
    .AWADDR(m_axi_outputs_AWADDR),
    .AWID(m_axi_outputs_AWID),
    .AWLEN(m_axi_outputs_AWLEN),
    .AWSIZE(m_axi_outputs_AWSIZE),
    .AWBURST(m_axi_outputs_AWBURST),
    .AWLOCK(m_axi_outputs_AWLOCK),
    .AWCACHE(m_axi_outputs_AWCACHE),
    .AWPROT(m_axi_outputs_AWPROT),
    .AWQOS(m_axi_outputs_AWQOS),
    .AWREGION(m_axi_outputs_AWREGION),
    .AWUSER(m_axi_outputs_AWUSER),
    .WVALID(m_axi_outputs_WVALID),
    .WREADY(m_axi_outputs_WREADY),
    .WDATA(m_axi_outputs_WDATA),
    .WSTRB(m_axi_outputs_WSTRB),
    .WLAST(m_axi_outputs_WLAST),
    .WID(m_axi_outputs_WID),
    .WUSER(m_axi_outputs_WUSER),
    .ARVALID(m_axi_outputs_ARVALID),
    .ARREADY(m_axi_outputs_ARREADY),
    .ARADDR(m_axi_outputs_ARADDR),
    .ARID(m_axi_outputs_ARID),
    .ARLEN(m_axi_outputs_ARLEN),
    .ARSIZE(m_axi_outputs_ARSIZE),
    .ARBURST(m_axi_outputs_ARBURST),
    .ARLOCK(m_axi_outputs_ARLOCK),
    .ARCACHE(m_axi_outputs_ARCACHE),
    .ARPROT(m_axi_outputs_ARPROT),
    .ARQOS(m_axi_outputs_ARQOS),
    .ARREGION(m_axi_outputs_ARREGION),
    .ARUSER(m_axi_outputs_ARUSER),
    .RVALID(m_axi_outputs_RVALID),
    .RREADY(m_axi_outputs_RREADY),
    .RDATA(m_axi_outputs_RDATA),
    .RLAST(m_axi_outputs_RLAST),
    .RID(m_axi_outputs_RID),
    .RUSER(m_axi_outputs_RUSER),
    .RRESP(m_axi_outputs_RRESP),
    .BVALID(m_axi_outputs_BVALID),
    .BREADY(m_axi_outputs_BREADY),
    .BRESP(m_axi_outputs_BRESP),
    .BID(m_axi_outputs_BID),
    .BUSER(m_axi_outputs_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(outputs_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(outputs_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(outputs_RDATA),
    .I_RID(outputs_RID),
    .I_RUSER(outputs_RUSER),
    .I_RRESP(outputs_RRESP),
    .I_RLAST(outputs_RLAST),
    .I_AWVALID(outputs_AWVALID),
    .I_AWREADY(outputs_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd5082),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(outputs_WVALID),
    .I_WREADY(outputs_WREADY),
    .I_WDATA(outputs_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(outputs_BVALID),
    .I_BREADY(outputs_BREADY),
    .I_BRESP(outputs_BRESP),
    .I_BID(outputs_BID),
    .I_BUSER(outputs_BUSER)
);

dfr_inference_reservoir #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
reservoir_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(reservoir_address0),
    .ce0(reservoir_ce0),
    .we0(reservoir_we0),
    .d0(reservoir_d0),
    .q0(reservoir_q0),
    .address1(reservoir_address1),
    .ce1(reservoir_ce1),
    .we1(reservoir_we1),
    .d1(reservoir_d1),
    .q1(reservoir_q1)
);

dfr_inference_reservoir_history #(
    .DataWidth( 16 ),
    .AddressRange( 508200 ),
    .AddressWidth( 19 ))
reservoir_history_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(reservoir_history_address0),
    .ce0(reservoir_history_ce0),
    .we0(reservoir_history_we0),
    .d0(reservoir_history_d0),
    .q0(reservoir_history_q0)
);

dfr_inference_dadd_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_2_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_492_p1),
    .din1(grp_fu_486_p2),
    .ce(1'b1),
    .dout(grp_fu_482_p2)
);

dfr_inference_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_492_p1),
    .din1(64'd4589168020290535424),
    .ce(1'b1),
    .dout(grp_fu_486_p2)
);

dfr_inference_sitodp_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_492_p0),
    .ce(grp_fu_492_ce),
    .dout(grp_fu_492_p1)
);

dfr_inference_urem_19ns_8ns_7_23_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
urem_19ns_8ns_7_23_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_947_ap_start),
    .done(grp_fu_947_ap_done),
    .din0(add_ln92_reg_1176),
    .din1(grp_fu_947_p1),
    .ce(1'b1),
    .dout(grp_fu_947_p2)
);

dfr_inference_mul_16ns_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_16ns_32s_48_1_1_U5(
    .din0(mul_ln114_fu_1071_p0),
    .din1(weights_read_reg_1270),
    .dout(mul_ln114_fu_1071_p2)
);

dfr_inference_mul_mul_19s_8ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 19 ))
mul_mul_19s_8ns_19_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1092_p0),
    .din1(grp_fu_1092_p1),
    .ce(1'b1),
    .dout(grp_fu_1092_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state18))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state18);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state34) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state34))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state34);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state62) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state61)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state62))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state62);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state61)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp5_flush_enable)) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state73)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((1'b1 == ap_CS_fsm_state73) | ((ap_enable_reg_pp5_iter0 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter1_state75)))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter1_state75))) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter0;
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state73)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_24_reg_367 <= 19'd0;
    end else if (((exitcond7330_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_24_reg_367 <= empty_25_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7431_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_356 <= empty_22_fu_515_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_356 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        k_1_reg_401 <= 19'd0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        k_1_reg_401 <= add_ln92_reg_1176;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_reg_378 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        k_reg_378 <= add_ln51_reg_1126;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        node_idx_1_reg_412 <= 7'd99;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln84_reg_1200 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        node_idx_1_reg_412 <= add_ln84_reg_1204;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        node_idx_reg_389 <= 7'd99;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln61_reg_1149 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        node_idx_reg_389 <= add_ln61_reg_1153;
    end
end

always @ (posedge ap_clk) begin
    if (((outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        output_idx_reg_436 <= 13'd0;
    end else if (((outputs_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
        output_idx_reg_436 <= add_ln111_reg_1242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        output_sum_reg_470 <= 55'd0;
    end else if (((ap_enable_reg_pp5_iter2 == 1'b1) & (icmp_ln113_reg_1261_pp5_iter1_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        output_sum_reg_470 <= output_sum_1_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        phi_mul_reg_447 <= 19'd0;
    end else if (((outputs_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
        phi_mul_reg_447 <= add_ln111_1_reg_1251;
    end
end

always @ (posedge ap_clk) begin
    if (((inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        reservoir_history_idx_fu_178 <= 32'd0;
    end else if (((icmp_ln92_reg_1214 == 1'd1) & (1'b1 == ap_CS_fsm_state64))) begin
        reservoir_history_idx_fu_178 <= reservoir_history_idx_1_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        reservoir_node_idx_reg_424 <= 7'd0;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln97_reg_1233 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        reservoir_node_idx_reg_424 <= add_ln97_reg_1228;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        weight_idx_reg_459 <= 7'd0;
    end else if (((icmp_ln113_fu_1038_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        weight_idx_reg_459 <= add_ln113_fu_1032_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state67_io) & (1'b1 == ap_CS_fsm_state67))) begin
        add_ln111_1_reg_1251 <= add_ln111_1_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        add_ln111_reg_1242 <= add_ln111_fu_1014_p2;
        icmp_ln111_reg_1247 <= icmp_ln111_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln51_reg_1126 <= add_ln51_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln61_fu_711_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln61_reg_1153 <= add_ln61_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln84_fu_916_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln84_reg_1204 <= add_ln84_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln92_reg_1176 <= add_ln92_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln97_reg_1228 <= add_ln97_fu_966_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln113_reg_1261 <= icmp_ln113_fu_1038_p2;
        icmp_ln113_reg_1261_pp5_iter1_reg <= icmp_ln113_reg_1261;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln61_reg_1149 <= icmp_ln61_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln84_reg_1200 <= icmp_ln84_fu_916_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        icmp_ln92_reg_1214 <= icmp_ln92_fu_956_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln97_reg_1233 <= icmp_ln97_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        inputs_addr_read_reg_1185 <= inputs_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        inputs_read_reg_1134 <= inputs_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        mul_ln100_reg_1223 <= grp_fu_1092_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_511 <= mg_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_1038_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        sub_ln114_reg_1265 <= sub_ln114_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_reg_1261 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        weights_read_reg_1270 <= weights_RDATA;
    end
end

always @ (*) begin
    if ((icmp_ln61_fu_711_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln84_fu_916_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state34 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state34 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln97_fu_972_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state62 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state62 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        ap_condition_pp5_exit_iter1_state75 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter1_state75 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_fu_1038_p2 == 1'd1) & (1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        ap_condition_pp5_flush_enable = 1'b1;
    end else begin
        ap_condition_pp5_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln84_reg_1200 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_node_idx_1_phi_fu_416_p4 = add_ln84_reg_1204;
    end else begin
        ap_phi_mux_node_idx_1_phi_fu_416_p4 = node_idx_1_reg_412;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln61_reg_1149 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_node_idx_phi_fu_393_p4 = add_ln61_reg_1153;
    end else begin
        ap_phi_mux_node_idx_phi_fu_393_p4 = node_idx_reg_389;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln97_reg_1233 == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 = add_ln97_reg_1228;
    end else begin
        ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 = reservoir_node_idx_reg_424;
    end
end

always @ (*) begin
    if (((outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | ((inputs_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((inputs_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        grp_fu_492_ce = 1'b1;
    end else begin
        grp_fu_492_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_492_p0 = inputs_addr_read_reg_1185;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_492_p0 = zext_ln80_fu_766_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_492_p0 = inputs_read_reg_1134;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_492_p0 = zext_ln57_fu_561_p1;
    end else begin
        grp_fu_492_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_947_ap_start = 1'b1;
    end else begin
        grp_fu_947_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((inputs_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            inputs_ARADDR = 64'd2000;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            inputs_ARADDR = 64'd0;
        end else begin
            inputs_ARADDR = 'bx;
        end
    end else begin
        inputs_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((inputs_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            inputs_ARLEN = 32'd508200;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            inputs_ARLEN = 32'd2000;
        end else begin
            inputs_ARLEN = 'bx;
        end
    end else begin
        inputs_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        inputs_ARVALID = 1'b1;
    end else begin
        inputs_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((inputs_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((inputs_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        inputs_RREADY = 1'b1;
    end else begin
        inputs_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state5))) begin
        inputs_blk_n_AR = m_axi_inputs_ARREADY;
    end else begin
        inputs_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state29))) begin
        inputs_blk_n_R = m_axi_inputs_RVALID;
    end else begin
        inputs_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mg_data_address0 = zext_ln65543_1_fu_911_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        mg_data_address0 = zext_ln65543_fu_706_p1;
    end else begin
        mg_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state16))) begin
        mg_data_ce0 = 1'b1;
    end else begin
        mg_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        outputs_AWVALID = 1'b1;
    end else begin
        outputs_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
        outputs_BREADY = 1'b1;
    end else begin
        outputs_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((outputs_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
        outputs_WVALID = 1'b1;
    end else begin
        outputs_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        outputs_blk_n_AW = m_axi_outputs_AWREADY;
    end else begin
        outputs_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        outputs_blk_n_B = m_axi_outputs_BVALID;
    end else begin
        outputs_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        outputs_blk_n_W = m_axi_outputs_WREADY;
    end else begin
        outputs_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        reservoir_address0 = 64'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        reservoir_address0 = node_idx_1_cast3_fu_933_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reservoir_address0 = node_idx_cast2_fu_728_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reservoir_address0 = 64'd99;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reservoir_address0 = p_cast_fu_527_p1;
    end else begin
        reservoir_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        reservoir_address1 = zext_ln100_fu_984_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        reservoir_address1 = zext_ln86_fu_928_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        reservoir_address1 = 64'd99;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        reservoir_address1 = 64'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        reservoir_address1 = zext_ln63_fu_723_p1;
    end else begin
        reservoir_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state36) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reservoir_ce0 = 1'b1;
    end else begin
        reservoir_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state28) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reservoir_ce1 = 1'b1;
    end else begin
        reservoir_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        reservoir_d0 = mg_output_1_fu_938_p3;
    end else if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reservoir_d0 = reservoir_q1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reservoir_d0 = 16'd0;
    end else begin
        reservoir_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        reservoir_history_address0 = zext_ln114_2_fu_1059_p1;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        reservoir_history_address0 = zext_ln100_2_fu_998_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reservoir_history_address0 = p_cast1_fu_544_p1;
    end else begin
        reservoir_history_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        reservoir_history_ce0 = 1'b1;
    end else begin
        reservoir_history_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        reservoir_history_d0 = reservoir_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        reservoir_history_d0 = 16'd0;
    end else begin
        reservoir_history_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln97_reg_1233 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((exitcond7330_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        reservoir_history_we0 = 1'b1;
    end else begin
        reservoir_history_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln84_reg_1200 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln61_reg_1149 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond7431_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reservoir_we0 = 1'b1;
    end else begin
        reservoir_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        reservoir_we1 = 1'b1;
    end else begin
        reservoir_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state67_io) & (icmp_ln111_reg_1247 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
        weights_ARVALID = 1'b1;
    end else begin
        weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_1261 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        weights_RREADY = 1'b1;
    end else begin
        weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_1247 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_1261 == 1'd0) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond7431_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond7330_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln51_fu_555_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((inputs_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln61_fu_711_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln61_fu_711_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state21 : begin
            if (((inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln70_fu_760_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((inputs_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln84_fu_916_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln84_fu_916_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln92_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((icmp_ln97_fu_972_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((icmp_ln97_fu_972_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state65 : begin
            if (((outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b0 == ap_block_state67_io) & (icmp_ln111_reg_1247 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else if (((1'b0 == ap_block_state67_io) & (icmp_ln111_reg_1247 == 1'd0) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((ap_enable_reg_pp5_iter0 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((ap_enable_reg_pp5_iter0 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((outputs_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_993_p2 = ($signed(mul_ln100_reg_1223) + $signed(zext_ln100_1_fu_989_p1));

assign add_ln111_1_fu_1026_p2 = (phi_mul_reg_447 + 19'd100);

assign add_ln111_fu_1014_p2 = (output_idx_reg_436 + 13'd1);

assign add_ln113_fu_1032_p2 = (weight_idx_reg_459 + 7'd1);

assign add_ln114_fu_1053_p2 = (phi_mul_reg_447 + zext_ln114_fu_1050_p1);

assign add_ln510_1_fu_815_p2 = ($signed(zext_ln510_1_fu_811_p1) + $signed(12'd3073));

assign add_ln510_fu_610_p2 = ($signed(zext_ln510_fu_606_p1) + $signed(12'd3073));

assign add_ln51_fu_549_p2 = (k_reg_378 + 11'd1);

assign add_ln61_fu_717_p2 = ($signed(ap_phi_mux_node_idx_phi_fu_393_p4) + $signed(7'd127));

assign add_ln84_fu_922_p2 = ($signed(ap_phi_mux_node_idx_1_phi_fu_416_p4) + $signed(7'd127));

assign add_ln92_fu_754_p2 = (k_1_reg_401 + 19'd1);

assign add_ln97_fu_966_p2 = (ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 + 7'd1);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd75];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((weights_RVALID == 1'b0) & (icmp_ln113_reg_1261 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((weights_RVALID == 1'b0) & (icmp_ln113_reg_1261 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

assign ap_block_state18_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state67_io = ((weights_ARREADY == 1'b0) & (icmp_ln111_reg_1247 == 1'd0));
end

assign ap_block_state74_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_pp5_stage0_iter1 = ((weights_RVALID == 1'b0) & (icmp_ln113_reg_1261 == 1'd0));
end

assign ap_block_state76_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_V_1_fu_771_p1 = grp_fu_482_p2;

assign data_V_fu_566_p1 = grp_fu_482_p2;

assign empty_22_fu_515_p2 = (empty_reg_356 + 7'd1);

assign empty_25_fu_532_p2 = (empty_24_reg_367 + 19'd1);

assign exitcond7330_fu_538_p2 = ((empty_24_reg_367 == 19'd508200) ? 1'b1 : 1'b0);

assign exitcond7431_fu_521_p2 = ((empty_reg_356 == 7'd100) ? 1'b1 : 1'b0);

assign grp_fu_1092_p0 = reservoir_history_idx_fu_178[18:0];

assign grp_fu_1092_p1 = 19'd100;

assign grp_fu_947_p1 = 19'd100;

assign icmp_ln111_fu_1020_p2 = ((output_idx_reg_436 == 13'd5082) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_1038_p2 = ((weight_idx_reg_459 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_555_p2 = ((k_reg_378 == 11'd2000) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_711_p2 = ((ap_phi_mux_node_idx_phi_fu_393_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_760_p2 = ((k_1_reg_401 == 19'd508200) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_916_p2 = ((ap_phi_mux_node_idx_1_phi_fu_416_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_956_p2 = ((trunc_ln92_fu_952_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_972_p2 = ((ap_phi_mux_reservoir_node_idx_phi_fu_428_p4 == 7'd100) ? 1'b1 : 1'b0);

assign isNeg_1_fu_821_p3 = add_ln510_1_fu_815_p2[32'd11];

assign isNeg_fu_616_p3 = add_ln510_fu_610_p2[32'd11];

assign mantissa_1_fu_797_p4 = {{{{1'd1}, {tmp_12_fu_793_p1}}}, {1'd0}};

assign mantissa_fu_592_p4 = {{{{1'd1}, {tmp_10_fu_588_p1}}}, {1'd0}};

assign mg_output_1_fu_938_p3 = {{reg_511}, {4'd0}};

assign mul_ln114_fu_1071_p0 = mul_ln114_fu_1071_p00;

assign mul_ln114_fu_1071_p00 = reservoir_history_q0;

assign node_idx_1_cast3_fu_933_p1 = node_idx_1_reg_412;

assign node_idx_cast2_fu_728_p1 = node_idx_reg_389;

assign output_sum_1_fu_1081_p2 = ($signed(sext_ln114_1_fu_1077_p1) + $signed(output_sum_reg_470));

assign outputs_WDATA = $signed(output_sum_reg_470);

assign p_Result_1_fu_775_p3 = data_V_1_fu_771_p1[32'd63];

assign p_Result_s_fu_570_p3 = data_V_fu_566_p1[32'd63];

assign p_cast1_fu_544_p1 = empty_24_reg_367;

assign p_cast_fu_527_p1 = empty_reg_356;

assign r_V_1_fu_656_p2 = zext_ln15_fu_602_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1;

assign r_V_2_fu_855_p2 = zext_ln15_1_fu_807_p1 >> sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1;

assign r_V_3_fu_861_p2 = zext_ln15_1_fu_807_p1 << sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1;

assign r_V_fu_650_p2 = zext_ln15_fu_602_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1;

assign reservoir_d1 = {{reg_511}, {4'd0}};

assign reservoir_history_idx_1_fu_1003_p2 = (reservoir_history_idx_fu_178 + 32'd1);

assign result_V_2_fu_692_p2 = (16'd0 - val_fu_684_p3);

assign result_V_6_fu_897_p2 = (16'd0 - val_1_fu_889_p3);

assign result_V_7_fu_903_p3 = ((p_Result_1_fu_775_p3[0:0] == 1'b1) ? result_V_6_fu_897_p2 : val_1_fu_889_p3);

assign result_V_fu_698_p3 = ((p_Result_s_fu_570_p3[0:0] == 1'b1) ? result_V_2_fu_692_p2 : val_fu_684_p3);

assign sext_ln114_1_fu_1077_p1 = $signed(mul_ln114_fu_1071_p2);

assign sext_ln1311_1_fu_835_p1 = $signed(sub_ln1311_1_fu_829_p2);

assign sext_ln1311_fu_630_p1 = $signed(sub_ln1311_fu_624_p2);

assign sh_prom_i_i_i_i_i37_cast_cast_cast_cast_fu_851_p1 = $unsigned(sh_prom_i_i_i_i_i37_cast_cast_cast_fu_847_p1);

assign sh_prom_i_i_i_i_i37_cast_cast_cast_fu_847_p1 = $signed(ush_1_fu_839_p3);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_646_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_642_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_642_p1 = $signed(ush_fu_634_p3);

assign sub_ln100_fu_978_p2 = ($signed(7'd99) - $signed(ap_phi_mux_reservoir_node_idx_phi_fu_428_p4));

assign sub_ln114_fu_1044_p2 = ($signed(7'd99) - $signed(weight_idx_reg_459));

assign sub_ln1311_1_fu_829_p2 = (11'd1023 - tmp_11_fu_783_p4);

assign sub_ln1311_fu_624_p2 = (11'd1023 - tmp_9_fu_578_p4);

assign tmp_10_fu_588_p1 = data_V_fu_566_p1[51:0];

assign tmp_11_fu_783_p4 = {{data_V_1_fu_771_p1[62:52]}};

assign tmp_12_fu_793_p1 = data_V_1_fu_771_p1[51:0];

assign tmp_1_fu_674_p4 = {{r_V_1_fu_656_p2[68:53]}};

assign tmp_6_fu_879_p4 = {{r_V_3_fu_861_p2[68:53]}};

assign tmp_8_fu_867_p3 = r_V_2_fu_855_p2[32'd53];

assign tmp_9_fu_578_p4 = {{data_V_fu_566_p1[62:52]}};

assign tmp_fu_662_p3 = r_V_fu_650_p2[32'd53];

assign trunc_ln92_fu_952_p1 = grp_fu_947_p2[6:0];

assign ush_1_fu_839_p3 = ((isNeg_1_fu_821_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_835_p1 : add_ln510_1_fu_815_p2);

assign ush_fu_634_p3 = ((isNeg_fu_616_p3[0:0] == 1'b1) ? sext_ln1311_fu_630_p1 : add_ln510_fu_610_p2);

assign val_1_fu_889_p3 = ((isNeg_1_fu_821_p3[0:0] == 1'b1) ? zext_ln662_1_fu_875_p1 : tmp_6_fu_879_p4);

assign val_fu_684_p3 = ((isNeg_fu_616_p3[0:0] == 1'b1) ? zext_ln662_fu_670_p1 : tmp_1_fu_674_p4);

assign zext_ln100_1_fu_989_p1 = reservoir_node_idx_reg_424;

assign zext_ln100_2_fu_998_p1 = add_ln100_fu_993_p2;

assign zext_ln100_fu_984_p1 = sub_ln100_fu_978_p2;

assign zext_ln114_2_fu_1059_p1 = add_ln114_fu_1053_p2;

assign zext_ln114_fu_1050_p1 = sub_ln114_reg_1265;

assign zext_ln15_1_fu_807_p1 = mantissa_1_fu_797_p4;

assign zext_ln15_fu_602_p1 = mantissa_fu_592_p4;

assign zext_ln510_1_fu_811_p1 = tmp_11_fu_783_p4;

assign zext_ln510_fu_606_p1 = tmp_9_fu_578_p4;

assign zext_ln57_fu_561_p1 = reservoir_q0;

assign zext_ln63_fu_723_p1 = add_ln61_fu_717_p2;

assign zext_ln65543_1_fu_911_p1 = result_V_7_fu_903_p3;

assign zext_ln65543_fu_706_p1 = result_V_fu_698_p3;

assign zext_ln662_1_fu_875_p1 = tmp_8_fu_867_p3;

assign zext_ln662_fu_670_p1 = tmp_fu_662_p3;

assign zext_ln80_fu_766_p1 = reservoir_q1;

assign zext_ln86_fu_928_p1 = add_ln84_fu_922_p2;

endmodule //dfr_inference
